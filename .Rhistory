filter(delinquentStatus != 0) %>%
#dplyr::select(geometry) %>%
st_filter(., kensington)
m(kenDelinquent)
View(kenDelinquent)
# Get vacant lots in South Kensington
kenDelinquent <-
delinquenciesVacantProps %>%
filter(delinquentStatus != 0) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenDelinquentJSON <-
kenDelinquent %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenDelinquentJSON, "./json/kenDelinquent.json")
# [source]('https://www.opendataphilly.org/dataset/real-estate-transfers')
# OpenDataPhilly Endpoint of Property Assessment History:
# transfers <- read_csv('https://opendata-downloads.s3.amazonaws.com/rtt_summary.csv')
# transfers <- read_csv('https://opendata.arcgis.com/datasets/88e5bc291b834606bd49f6fd6dca226e_0.csv')
# OR load locally
transfers <- readRDS('../data/local/transfers.rds')
# OpenDataPhilly - Transfers (48 variables)
transfersVars <-
c("document_type",                # KEEP*** -----------------------------------refers to type of Real Estate Transaction
"display_date",                 # KEEP***
"street_address",               # KEEP for JOIN check
"grantors",                     # KEEP --------------------------------------seller (on deeds), or borrower (on mortgages)
"grantees",                     # KEEP --------------------------------------buyer, recipient, new owner, or lien holder
"total_consideration",          # KEEP?** -----------------------------------good exchanged for the real estate (usually money)
#"assessed_value",               # KEEP?** -----------------------------------assess value by OPA
#"common_level_ratio",           # UNNECESSARY -------------------------------fair market : assessment values ratio
#"fair_market_value",            # KEEP?** -----------------------------------assessment value by common level ratio
#"receipt_date",                 # UNNECESSARY - display_date is used
#"recording_date",               # UNNECESSARY - display_date is used
#"document_date",                # UNNECESSARY - display_date is used
"opa_account_num")              # KEEP****to join
#"property_count")               # KEEP --------------------------------------Number of properties in document
# Data wrangling
transfersData <- transfers %>%
dplyr::select(all_of(transfersVars)) %>%
filter(!is.na(opa_account_num)) %>%
filter(document_type %in% c('DEED',
'DEED LAND BANK',
'DEED MISCELLANEOUS',
'DEED MISCELLANEOUS TAXABLE',
'DEED OF CONDEMNATION',
'DEED SHERIFF'))
# JOIN to properties
# propertiesData <---> transfersData
# if a parcel_number has multiple deeds, I manipulated data to shift deed sheriff first
# so distinct() will grab deed sheriff and neglect others
transfersProps <- propertiesData %>%
inner_join(transfersData, by= c('parcel_number'='opa_account_num'))%>%
mutate(document_type = factor(document_type,
labels(c("DEED SHERIFF" = 1,
"DEED" = 2,
"DEED MISCELLANEOUS" = 3,
"DEED OF CONDEMNATION" = 4,
"DEED LAND BANK" = 5,
"DEED MISCELLANEOUS TAXABLE" = 6))))
# save locally
# saveRDS(transfers, file = "transfers.rds")
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps %>%
filter(delinquentStatus == 2) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
m(kenUsBank)
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps %>%
filter(delinquentStatus == 2) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps %>%
filter(delinquentStatus == 2) %>%
dplyr::select(geometry)
m(kenUsBank)
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps
View(kenUsBank)
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps %>%
filter(delinquentType == 2) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenDelinquent <-
delinquenciesVacantProps %>%
filter(delinquentType != 0) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenDelinquentJSON <-
kenDelinquent %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenDelinquentJSON, "./json/kenDelinquent.json")
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps %>%
filter(delinquentType == 2) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenDelinquentJSON <-
kenDelinquent %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenDelinquentJSON, "./json/kenDelinquent.json")
kenDelinquentJSON <-
kenDelinquent %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenDelinquentJSON, "./json/kenDelinquent.json")
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps %>%
filter(delinquentType == 2) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenDelinquentJSON <-
kenUsBank %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenUsBankJSON, "./json/kenUsBank.json")
kenUsBankJSON <-
kenUsBank %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenUsBankJSON, "./json/kenUsBank.json")
# sheriff sales after 2021 from client
sheriffSales_21 <- read_csv('./data/sheriffSales_21.csv') %>%
distinct(OPA, .keep_all=TRUE)                                                # remove duplicates
# Sheriff Sales before 2021 from real estate transfers data (completed)
sheriffSales_20 <-
transfersProps %>%
filter(document_type == "DEED SHERIFF") %>%
arrange(parcel_number, document_type) %>%
distinct(parcel_number, .keep_all = TRUE)
# join all sheriff sales info we have together
## sheriff sales data from transfers
sheriffProps <-
left_join(
delinquenciesVacantProps,
st_drop_geometry(sheriffSales_20),
by = "parcel_number") %>%
distinct(parcel_number, .keep_all = T) %>%
merge(., sheriffSales_21,
by.x = "parcel_number", by.y = "OPA", all.x = T, no.dups = T) %>%
mutate(pastSheriffSale = ifelse(document_type == "DEED SHERIFF", 1, 0)) %>%   #  past records only
mutate(pastSheriffSale = replace_na(pastSheriffSale, 0)) %>%
mutate(futureSheriffSale = ifelse(document_type == "DEED SHERIFF" | is.na(Status) == F | sheriff_sale == "Y", 1, 0)) %>% # future
mutate(futureSheriffSale = replace_na(futureSheriffSale, 0)) %>%
mutate(allSheriffSales = ifelse(pastSheriffSale == 1 | futureSheriffSale == 1, 1, 0),
sheriffSaleYear = year(as.Date(display_date)))
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
m(kenSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps
View(kenSheriff)
g(kenSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
g(kenSheriff)
m(kenSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry, futureSheriffSale) %>%
st_filter(., kensington)
m(kenSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry, futureSheriffSale) %>%
st_filter(., kensington)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
write(kenSheriffJSON, "./json/kenSheriff.json")
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenSheriffJSON <-
kenSheriff %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenSheriffJSON, "./json/kenSheriff.json")
kenFutureSheriff <-
sheriffProps %>%
filter(futureSheriffSale == 1) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenFutureSheriffJSON <-
kenFutureSheriff %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenFutureSheriffJSON, "./json/kenFutureSheriff.json")
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry, allSheriffSales, futureSheriffSales) %>%
st_filter(., kensington)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry, allSheriffSales, futureSheriffSale) %>%
st_filter(., kensington)
View(sheriffSales_21)
futureSheriffProps <-
delinquenciesVacantProps %>%
left_join(., by=c("parcel_number"="OPA"))
futureSheriffProps <-
delinquenciesVacantProps %>%
left_join(., SheriffSales_21, by=c("parcel_number"="OPA"))
futureSheriffProps <-
delinquenciesVacantProps %>%
left_join(., sheriffSales_21, by=c("parcel_number"="OPA"))
View(futureSheriffProps)
unique(futureSheriffProps$Status)
futureSheriffProps <-
delinquenciesVacantProps %>%
left_join(., sheriffSales_21, by=c("parcel_number"="OPA")) %>%
filter(Status == 'Preview')
kenFutureSheriff <-
futureSheriffProps %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
m(kenFutureSheriff)
m(kenFutureSheriff)
kenFutureSheriff <-
futureSheriffProps %>%
dplyr::select(geometry) #%>%
m(kenFutureSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry, allSheriffSales, futureSheriffSale) %>%
st_filter(., kensington)
kenSheriffJSON <-
kenSheriff %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenSheriffJSON, "./json/kenSheriff.json")
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(geometry) %>%
st_filter(., kensington)
kenSheriffJSON <-
kenSheriff %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenSheriffJSON, "./json/kenSheriff.json")
m(kenSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
#dplyr::select(geometry) %>%
st_filter(., kensington)
m(kenSheriff)
g(kenSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
sheriffProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(street_address, geometry) %>%
st_filter(., kensington)
g(kenSheriff)
m(kenSheriff)
# Get vacant lots in South Kensington
kenSheriff <-
vacantDelinquentProps %>%
filter(allSheriffSales == 1) %>%
dplyr::select(street_address, geometry) %>%
st_filter(., kensington)
# Get vacant lots in South Kensington
kenSheriff <-
vacantDelinquenciesProps %>%
# filter(allSheriffSales == 1) %>%
dplyr::select(street_address, geometry) %>%
st_filter(., kensington)
# R Markdown options
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F, cache=T, cache.lazy = F)
# LOAD PACKAGES
library(basemaps)
library(caret)
library(geojsonsf)
library(gganimate)
library(gifski)
library(gridExtra)
library(kableExtra)
library(knitr)
library(lubridate)
library(mapview)
library(riem)
library(scales)
library(sf)
library(spdep)
library(tidycensus)
library(tidyverse)
library(tigris)
library(viridis)
# R options setup
options(scipen = 999)
options(tigris_class = "sf")
options(tigris_use_cache = T)
options(knitr.graphics.error = F)
# additional functions from PPA book
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shortcuts
g <- glimpse
m <- mapview
len <- length
st_c <- st_coordinates
# Aesthetic settings
colors <- c('#222222',
'#eeeeee')
palette <- c("#676767",
"#18b6c4",   # properties
"#18c493",   # vacantLots
"#f7c457",   # delinquencies
"#f79c57",   # us bank liens
"#f76957")   # sheriff sales
g(demographics)
z <- demographics %>%
filter(nhMajMin = 1) %>%
st_union()
z <- demographics %>%
filter(nhMajMin == 1) %>%
st_union()
m(z)
incomePolygon <- demographics %>%
filter(nhIncome == 0) %>%
st_union()
m(incomePolygon)
majMinPolygon <- demographics %>%
filter(nhMajMin == 0) %>%
st_union()
majMinJSON <-
majMinPolygon %>%
st_transform('EPSG:4326') %>%
sf_geojson(.)
majMinPolygon <- demographics %>%
filter(nhMajMin == 0) %>%
st_union() %>%
st_sf()
majMinJSON <-
majMinPolygon %>%
st_transform('EPSG:4326') %>%
sf_geojson(.)
write(majMinJSON, "./json/majMin.json")
incomePolygon <- demographics %>%
filter(nhIncome == 0) %>%
st_union() %>%
st_sf()
incomeJSON <-
incomePolygon %>%
st_transform('EPSG:4326') %>%
sf_geojson(.)
write(incomeJSON, "./json/income.json")
majMinPolygon <- demographics %>%
filter(nhMajMin == 0) %>%
dplyr::select(geometry) %>%
st_union() %>%
st_sf()
majMinJSON <-
majMinPolygon %>%
st_transform('EPSG:4326') %>%
sf_geojson(.)
write(majMinJSON, "./json/majMin.json")
incomePolygon <- demographics %>%
filter(nhIncome == 0) %>%
dplyr::select(geometry) %>%
st_union() %>%
st_sf()
incomeJSON <-
incomePolygon %>%
st_transform('EPSG:4326') %>%
sf_geojson(.)
write(incomeJSON, "./json/income.json")
# Get vacant lots in South Kensington
kenUsBank <-
delinquenciesVacantProps %>%
filter(delinquentType == 2) %>%
dplyr::select(geometry) #%>%
#st_filter(., kensington)
kenUsBankJSON <-
kenUsBank %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenUsBankJSON, "./json/kenUsBankAll.json")
m(kenVacantLand)
# Get vacant lots in South Kensington
kenVacantLand <-
vacantLandProps %>%
dplyr::select(geometry, ADDRESS) %>%
st_filter(., kensington)
# [source]('https://www.opendataphilly.org/dataset/vacant-property-indicators')
# OpenDataPhilly Vacant Property Indicator - Lots
vacantLand <- read_csv('https://opendata.arcgis.com/datasets/19c35fb02d544a9bad0032b58268c9f9_0.csv')
# Select useful variables --- NO GEOMETRY
vacantLandVars <-
c("ADDRESS",                        # KEEP for JOIN CHECK
"BLDG_DESC",                      # KEEP ------------------------------------Building description from OPA
"OPA_ID",                         # KEEP to JOIN****
#"ZONINGBASEDISTRICT",             # KEEP***
"LAND_RANK")                      # KEEP?
# Data wrangling
vacantLandData <- vacantLand %>%
dplyr::select(vacantLandVars) %>%
mutate(vacant = 'vacant')
# JOIN to propertiesData
# propertiesData <---> vacantLandData
vacantLandProps <- propertiesData %>%
inner_join(vacantLandData, by=c('parcel_number'='OPA_ID'))
# save locally
# saveRDS(vacantLand, file = "vacantLand.rds")
saveRDS(vacantLandProps, file = "vacantLandProps.rds")
vacantLandJSON <-
vacantLandProps %>%
dplyr::select(geometry) %>%
sample_n(., 1000) %>%
sf_geojson(.)
write(vacantLandJSON, "./json/vacantLand.json")
kenVacantLand <-
vacantLandProps %>%
dplyr::select(geometry, ADDRESS) %>%
st_filter(., kensington)
m(kenVacantLand)
kenVacantLand <-
vacantLandProps %>%
dplyr::select(geometry, ADDRESS) %>%
filter(ADDRESS %in% c('1601 N LAWRENCE ST',
'1603 N LAWRENCE ST',
'1605 N LAWRENCE ST'
))
m(kenVacantLand)
kenVacantPropsJSON <-
kenVacantProps %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
kenVacantProps <-
vacantLandProps %>%
dplyr::select(geometry, ADDRESS) %>%
filter(ADDRESS %in% c('1601 N LAWRENCE ST',
'1603 N LAWRENCE ST',
'1605 N LAWRENCE ST'
))
kenVacantPropsJSON <-
kenVacantProps %>%
st_transform('EPSG:4326') %>%
sf_geojson(.) %>%
gsub("\\{\"type\":\"Point\",\"coordinates\":", '', .) %>%
gsub("\\}", ',', .)
write(kenVacantPropsJSON, "./json/kenVacantProps.json")
sf_bbox(kensington)
sf_extent(kensington)
st_bbox(kensington)
kensington %>%
st_transform('EPSG:4326') %>%
st_bbox(kensington)
