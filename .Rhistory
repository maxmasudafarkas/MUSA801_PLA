'FULL DEMOLITION',                                  #    644 ***NEW ***ZONING {Full demolition}
'LOT LINE RELOCATION',                              #    317 ***NEW ***ZONING {Combine or redraw lots} ***SIGNIFICATIVE!
'LOTLIN',                                           #   2527 ***OLD ***ZONING {Combine or redraw lots} ***SIGNIFICATIVE!
'NEW CONSTRUCTION',                                 #<- 6292 ***NEW ***BUILDING (1812) ***RESIDENTIAL BUILDING (4480)
'NEW CONSTRUCTION (SHELL ONLY)',                    #<-   19 ***NEW ***BUILDING
#'NEW CONSTRUCTION (STAND ALONE)',                   #<-   48 ***NEW ***RESIDENTIAL BUILDING
'NEW CONSTRUCTION, ADDITION, GFA CHANGE',           #<- 4986 ***NEW ***ZONING {New construction attached or added to existing}
'NEWCON'#                                           #<- 5539 ***OLD ***ZONING (-3) ***BUILDING {New construction of structure}
#'PARTCH',                                           #   3317 ***OLD ***ZONING {Change in use}
#'SFADD',                                            #   3149 ***OLD ***ZONING {Add square footage to existing}
)
# Filter data with PERMIT TYPES (building or zoning)
permitsZoningData <- permitsData %>%
filter(typeofwork %in% permitTypeOfWorkCats)
# JOIN to properties
# permitsZoningData <---> propertiesData
permitsProps <- propertiesData %>%
inner_join(st_drop_geometry(permitsZoningData),  by = c('parcel_number'='opa_account_num'))
# classify zoning permits by five-year periods
permitsYears <-
permitsPanel %>%
mutate(year = as.integer(substr(period, 1,4))) %>%
filter(year != '2022') %>%
dplyr::select(-period) %>%
group_by(year, uniqueID) %>%
summarize(permitCount = sum(permitCount))
# permits by quarter by fishnet cell
permitsNet <- permitsProps %>%
st_join(fishnet, left=F) %>%
mutate(year = year(permitissuedate),
month = month(permitissuedate),
quarter = case_when(
month %in% c(1, 2, 3) ~ 1,
month %in% c(4, 5, 6) ~ 2,
month %in% c(7, 8, 9) ~ 3,
month %in% c(10, 11, 12) ~ 4)) %>%
mutate(period = paste(year, quarter, sep='-')) %>%
group_by(period, uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
# random cross validation ID (out of 100) for later use
# mutate(uniqueID = rownames(.)) %>%
# mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
# create empty panel with all possible time/space combinations by fishnet grids
basePanel <-
expand.grid(period = unique(permitsNet$period),
uniqueID = unique(fishnet$uniqueID))
# join panel to fishnet geometry
permitsPanel <-
permitsNet %>%
right_join(basePanel) %>%
replace(is.na(.), 0) %>%
left_join(fishnet) %>%
st_sf()
# save locally
# saveRDS(permits, file = "permits.rds")
permitsNetYears <-
st_drop_geometry(permitsYears) %>%
filter(year < 2020,
year > 2015)
# classify zoning permits by five-year periods
permitsYears <-
permitsPanel %>%
mutate(year = as.integer(substr(period, 1,4))) %>%
filter(year != '2022') %>%
dplyr::select(-period) %>%
group_by(year, uniqueID) %>%
summarize(permitCount = sum(permitCount))
# Select the four-year interval (16, 17, 18 and 19)
permitsNetYears <-
st_drop_geometry(permitsYears) %>%
filter(year < 2020,
year > 2015)
# variables to keep
salesVars <-
c("geometry",
"document_type",
"display_date",
"grantors",
"grantees",
"total_consideration",
"year",
"period",
"total_area")
# if a parcel_number has multiple sales, we only get the latest one
salesProps <-
transfersProps %>%
drop_na(total_area) %>% # drop sales that have NA for their area
mutate(document_type = as.character(document_type)) %>%  # to ignore Gillian deed factor levels
group_by(parcel_number) %>%
slice(which.max(display_date)) %>% # to get only the latest one
mutate(year = year(display_date),
month = month(display_date),
quarter = case_when(
month %in% c(1, 2, 3) ~ 1,
month %in% c(4, 5, 6) ~ 2,
month %in% c(7, 8, 9) ~ 3,
month %in% c(10, 11, 12) ~ 4)) %>%
mutate(period = paste(year, quarter, sep='-')) %>%
st_sf()
# select and transform features + filter by period + JOIN into fishnet
salesPropsNet <-
salesProps %>%
dplyr::select(all_of(salesVars)) %>%
filter(year > 2015,
year < 2020,
total_consideration < 4e8,
total_consideration > 1e4) %>%  # filter outliers and most "symbolic" transfers
mutate(sqftPrice = ifelse(total_area > 0, total_consideration/total_area, 0)) %>% # calculate price by sqft
st_join(fishnet, left = F)
# create empty panel with all possible time/space combinations by fishnet grids YEARS
yearPanel <-
expand.grid(year = unique(salesProps$year),
uniqueID = unique(fishnet$uniqueID))
# SALES BY YEARS
# Get sales count by fishnet from 2016 to 2019
salesNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(salesCount = sum(n())) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
# Get sales count by fishnet from 2016 to 2019
priceNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(meanSqftPrice = mean(sqftPrice)) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears)
View(completeNet)
# Get sales count by fishnet from 2016 to 2019
sqftNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(meanSqftPrice = mean(sqftPrice)) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
# Get sales count by fishnet from 2016 to 2019
priceNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(meanPrice = mean(total_consideration)) %>%
st_drop_geometr
# Get sales count by fishnet from 2016 to 2019
priceNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(meanPrice = mean(total_consideration)) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears) %>%
left_join(sqftNetYears)
salesPropsNet
g(salesPropsNet)
g(salesPropsNet)
head(salesPropsNet, 100)
m(head(salesPropsNet, 100))
View(salesPropsNet)
# Get change in number of individual owners by fishnet from 2016 to 2019
individualOwnersNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(numIndGrantors = n_distinct(grantors),
numIndGrantees = n_distinct(grantees))
View(individualOwnersNetYears)
# Get change in number of individual owners by fishnet from 2016 to 2019
individualOwnersNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(numIndGrantors = n_distinct(grantors),
numIndGrantees = n_distinct(grantees)) %>%
mutate(indOwnerDelta = abs(numIndGrantors - numIndGrantees)) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
View(individualOwnersNetYears)
# Get sales count by fishnet from 2016 to 2019
salesNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(salesCount = sum(n())) %>%
st_drop_geometry()
# create empty panel with all possible time/space combinations by fishnet grids YEARS
yearPanel <-
expand.grid(year = unique(salesPropsNet$year),
uniqueID = unique(fishnet$uniqueID))
salesNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(salesCount = sum(n())) %>%
st_drop_geometry() %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
# Get sqft price paid by fishnet from 2016 to 2019
sqftNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(meanSqftPrice = mean(sqftPrice)) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
# Get total price paid by fishnet from 2016 to 2019
priceNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(meanPrice = mean(total_consideration)) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
# Get change in number of individual owners by fishnet from 2016 to 2019
individualOwnersNetYears <-
salesPropsNet %>%
group_by(year, uniqueID) %>%
summarize(numIndGrantors = n_distinct(grantors),
numIndGrantees = n_distinct(grantees)) %>%
mutate(indOwnerDelta = abs(numIndGrantors - numIndGrantees)) %>%
dplyr::select(-numIndGrantors, -numIndGrantees) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears) %>%
left_join(sqftNetYears)
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears) %>%
left_join(sqftNetYears) %>%
left_join(individualOwnersNetYears)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2019) %>% # take out the ones whose debt started after 2018
dplyr::select(total_due)
g(debtNet)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2019) %>% # take out the ones whose debt started after 2018
dplyr::select(total_due)
View(debtNet)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2019) %>% # take out the ones whose debt started after 2018
dplyr::select(total_due) %>%
st_join(., fishnet)
g(delinquenciesProps)
View(delinquencies)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2020) %>% # take out the ones whose debt started after 2018
dplyr::select(total_due) %>%
st_join(., fishnet)
g(delinquenciesProps)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2020) %>% # take out the ones whose debt started after 2018
rename(most_recent_year_owed  = 'year') %>%
dplyr::select(total_due) %>%
st_join(., fishnet)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2020) %>% # take out the ones whose debt started after 2018
rename('year' = most_recent_year_owed) %>%
dplyr::select(total_due) %>%
st_join(., fishnet)
# filter time
g(debtNet)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2020) %>% # take out the ones whose debt started after 2018
rename('year' = most_recent_year_owed) %>%
st_join(., fishnet)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2020) %>% # take out the ones whose debt started after 2018
rename('year' = most_recent_year_owed) %>%
st_join(., fishnet) %>%
group_by(year, uniqueID)
debtNet <- delinquenciesProps %>%
filter(oldest_year_owed < 2020) %>% # take out the ones whose debt started after 2018
rename('year' = most_recent_year_owed) %>%
st_join(., fishnet) %>%
group_by(year, uniqueID) %>%
summarize(meanDebt = mean(total_due))
# filter time
g(debtNet)
debtNet %>%
filter(year > 2015)
debtNetYears <- delinquenciesProps %>%
filter(oldest_year_owed < 2020) %>% # take out the ones whose debt started after 2018
rename('year' = most_recent_year_owed) %>%
st_join(., fishnet) %>%
group_by(year, uniqueID) %>%
summarize(meanDebt = mean(total_due)) %>%
filter(year > 2015) %>%
st_drop_geometry()  %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
View(debtNetYears)
debtNetYears %>%
filter(meanDebt > 0)
len(debtNetYears %>%
filter(meanDebt > 0))
nrows(debtNetYears %>%
filter(meanDebt > 0))
nrow(debtNetYears %>%
filter(meanDebt > 0))
nrow(debtNetYears %>%
filter(meanDebt > 0))/
nrow(debtNetYears)
nrow(debtNetYears %>%
filter(year == 2019) %>%
filter(meanDebt > 0))/
nrow(debtNetYears %>%
filter(year == 2019))
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears) %>%
left_join(sqftNetYears) %>%
left_join(debtNetYears) %>%
left_join(individualOwnersNetYears)
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears) %>%
left_join(sqftNetYears) %>%
left_join(debtNetYears) %>%
left_join(individualOwnersNetYears)
g(vacantLandProps)
vars <- c(
'sale_date',
'total_area',
'LAND_RANK'
)
z <-
dplyr::select(vars)
z <-
vacantLandProps %>%
dplyr::select(vars)
g(z)
z <-
vacantLandProps %>%
dplyr::select(vars) %>%
drop_na(total_area) #%>% # drop sales that have NA for their area
g(z)
vacantNet <-
vacantLandProps %>%
dplyr::select(vars) %>%
drop_na(total_area) #%>% # drop sales that have NA for their area
g(vacantNet)
vacantNet <-
vacantLandProps %>%
dplyr::select(vars) %>%
drop_na(total_area) %>% # drop sales that have NA for their area
st_join(., fishnet)
View(yearPanel)
View(vacantLandProps)
View(vacantLandProps)
vacantNet <-
vacantLandProps %>%
# dplyr::select(vars) %>%
drop_na(total_area) %>% # drop sales that have NA for their area
st_join(., fishnet)
vacantNet <-
vacantLandProps %>%
# dplyr::select(vars) %>%
drop_na(total_area) %>% # drop sales that have NA for their area
st_sf() %>%
st_join(., fishnet)
View(vacantNet)
z <- vacantNet %>%
group_by(uniqueID) %>%
summarize(cumulativeArea = sum(total_area))
View(z)
vacantNet <-
vacantLandProps %>%
# dplyr::select(vars) %>%
drop_na(total_area) %>% # drop sales that have NA for their area
st_sf() %>%
st_join(., fishnet) %>%
group_by(uniqueID) %>%
summarize(cumulativeVacantArea = sum(total_area),
totalVacantLots = sum(n()))
vacantNet <-
vacantLandProps %>%
drop_na(total_area) %>% # drop sales that have NA for their area
st_sf() %>%
st_join(., fishnet) %>%
group_by(uniqueID) %>%
summarize(cumulativeVacantArea = sum(total_area),
totalVacantLots = sum(n())) %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
# get count of vacant lots and cumulative vacant area
vacantNet <-
vacantLandProps %>%
drop_na(total_area) %>% # drop sales that have NA for their area
st_sf() %>%
st_join(., fishnet) %>%
group_by(uniqueID) %>%
summarize(cumulativeVacantArea = sum(total_area),
totalVacantLots = sum(n())) %>%
st_drop_geometry() %>%
right_join(yearPanel) %>%
replace(is.na(.), 0)
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears) %>%
left_join(sqftNetYears) %>%
left_join(debtNetYears) %>%
left_join(individualOwnersNetYears)
View(vacantNet)
completeNet <-
permitsNetYears %>%
left_join(salesNetYears) %>%
left_join(priceNetYears) %>%
left_join(sqftNetYears) %>%
left_join(debtNetYears) %>%
left_join(individualOwnersNetYears) %>%
left_join(vacantNet)
View(completeNet)
View(fishnet)
schoolsData <- st_read('https://opendata.arcgis.com/datasets/d46a7e59e2c246c891fbee778759717e_0.geojson')
View(schoolsData)
??st_read
schoolsData <-
st_read('https://opendata.arcgis.com/datasets/d46a7e59e2c246c891fbee778759717e_0.geojson') %>%
st_transform(st_crs(phlcrs))
m(schoolsData)
g(schoolsData)
unique(schoolsData$GRADE_LEVEL)
table(schoolsData$GRADE_LEVEL)
unique(schoolsData$GRADE_LEVEL)
# take out special and Kindergardens
schoolsSelected <- c(
"ELEMENTARY/MIDDLE",
"ELEMENTARY/MIDDLE/HIGH",
"HIGH SCHOOL",
"ELEMENTARY SCHOOL",
"MIDDLE/HIGH",
"MIDDLE SCHOOL")
g(schoolsData)
unique(schoolsData$ACTIVE)
unique(schoolsData$ACTIVE)
g(schoolsData)
unique(schoolsData$TYPE_SPECIFIC)
g(schoolsData)
# get school locations
schoolsData <-
st_read('https://opendata.arcgis.com/datasets/d46a7e59e2c246c891fbee778759717e_0.geojson') %>%
st_transform(st_crs(phlcrs)) %>%
filter(!GRADE_LEVEL %in% schoolsSelected) %>%
dplyr::select(-schoolsData)
# get school locations
schoolsData <-
st_read('https://opendata.arcgis.com/datasets/d46a7e59e2c246c891fbee778759717e_0.geojson') %>%
st_transform(st_crs(phlcrs)) %>%
filter(!GRADE_LEVEL %in% schoolsSelected) %>%
dplyr::select(-all_of(schoolsData))
# get school locations
schoolsData <-
st_read('https://opendata.arcgis.com/datasets/d46a7e59e2c246c891fbee778759717e_0.geojson') %>%
st_transform(st_crs(phlcrs)) %>%
filter(!GRADE_LEVEL %in% schoolsSelected) %>%
dplyr::select(geometry)
g(schoolsData)
m(schoolsData)
# get school locations
schoolsData <-
st_read('https://opendata.arcgis.com/datasets/d46a7e59e2c246c891fbee778759717e_0.geojson') %>%
st_transform(st_crs(phlcrs)) %>%
filter(GRADE_LEVEL %in% schoolsSelected) %>%
dplyr::select(geometry)
m(schoolsData)
parksData <-
st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson') %>%
st_transform(st_crs(phlcrs))
g(parksData)
unique(parksData$PROPERTY_CLASSIFICATION)
View(parksData)
m(parksData)
g(parksData)
View(parksData)
parksData <-
st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson') %>%
st_transform(st_crs(phlcrs)) %>%
filter(nested == N)
g(parksData)
parksData <-
st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson') %>%
st_transform(st_crs(phlcrs)) %>%
filter(NESTED == N)
parksData <-
st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson') %>%
st_transform(st_crs(phlcrs)) %>%
filter(NESTED == 'N')
g(parksData)
m(parksData)
z <- parksData %>%
multipleRingBuffer(., 1000, 100)
m(z)
# get parks polygon data
parksData <-
st_read('https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson') %>%
st_transform(st_crs(phlcrs))
m(parksData)
