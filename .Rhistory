"year_of_last_assessment",        # KEEP for reference
"total_assessment",               # KEEP for reference
"taxable_assessment",             # KEEP for reference
#"mailing_address",                # UNNECESSARY
#"mailing_city",                   # UNNECESSARY
#"mailing_state",                  # UNNECESSARY
#"mailing_zip",                    # UNNECESSARY
#"return_mail",                    # UNNECESSARY
"building_code",                  # ???? ------------------------------------Building codes describe the building.
#"detail_building_description",    # ???? ------------------------------------Description of the building code.
#"general_building_description",   # ???? ------------------------------------General description of how the building is used.
"building_category",              # ???? ------------------------------------Type of Building Group (residential, commercial, etc.).
"coll_agency_num_years",          # ???? ------------------------------------TO COLLECTION AGENCY
"coll_agency_most_recent_year",   # ???? ------------------------------------TO COLLECTION AGENCY
"coll_agency_oldest_year",        # ???? ------------------------------------TO COLLECTION AGENCY
"coll_agency_principal_owed",     # ???? ------------------------------------TO COLLECTION AGENCY
"coll_agency_total_owed",         # ???? ------------------------------------TO COLLECTION AGENCY
#"exempt_abatement_assessment",    # UNNECESSARY -----------------------------The amount excluded from the tax base.
#"homestead_value",                # UNNECESSARY -----------------------------Amount of Homestead Exemption.
"net_tax_value_after_homestead",  # ???? ------------------------------------The net tax value after the homestead exemption.
#"agreement_agency",               # UNNECESSARY -----------------------------Either "TIPS","lbr","grb","LAW"
#"sequestration_enforcement",      # UNNECESSARY -----------------------------If the property is a rental, the city can collect rent
"bankruptcy",                     # UNNECESSARY -----------------------------Active bankruptcy
#"years_in_bankruptcy",            # UNNECESSARY
#"most_recent_bankrupt_year",      # UNNECESSARY
#"oldest_bankrupt_year",           # UNNECESSARY
#"principal_sum_bankrupt_years",   # UNNECESSARY
#"total_amount_bankrupt_years",    # UNNECESSARY
"sheriff_sale",                   # KEEP*** ---------------------------------Property is in the Sheriff Sale Process (any stage).
"liens_sold_1990s",               # KEEP*** ---------------------------------Property was included in 1997 Lien Sale.
"liens_sold_2015",                # KEEP*** ---------------------------------Property is included in Recent Lien Sales.
#"assessment_under_appeal",        # UNNECESSARY -----------------------------the owner has appealed the assessment.
"year_month")                     # year$month >>>> Unlisted in metadata
# Data wrangling
delinquenciesData <- delinquencies %>%
dplyr::select(delinquenciesVars) %>%
rename("address" = street_address)
# Load properties from 99 until now from ODP.
properties <- read_csv('https://opendata-downloads.s3.amazonaws.com/opa_properties_public.csv')
# Selected variables of interest
propertiesVars <-
c(#"objectid",                       # UNNECESSARY
#"assessment_date",                # UNNECESSARY
#"basements",                      # UNNECESSARY
#"beginning_point",                # UNNECESSARY
#"book_and_page",                  # UNNECESSARY
#"building_code",                  # UNNECESSARY
#"building_code_description",      # UNNECESSARY
"category_code",                  # KEEP ------------------------------------determines if it is VACANT LAND
"category_code_description",      # KEEP ------------------------------------determines if it is VACANT LAND
#"census_tract",                   # UNNECESSARY
#"central_air",                    # UNNECESSARY
#"cross_reference",                # UNNECESSARY
#"date_exterior_condition",        # UNNECESSARY
#"depth",                          # UNNECESSARY
#"exempt_building",                # UNNECESSARY
#"exempt_land",                    # UNNECESSARY
"exterior_condition",             # KEEP ------------------------------------how the exterior appears based on observation.
#"fireplaces",                     # UNNECESSARY
#"frontage",                       # UNNECESSARY
#"fuel",                           # UNNECESSARY
#"garage_spaces",                  # UNNECESSARY
#"garage_type",                    # UNNECESSARY
#"general_construction",           # UNNECESSARY
#"geographic_ward",                # UNNECESSARY
#"homestead_exemption",            # UNNECESSARY
#"house_extension",                # UNNECESSARY
#"house_number",                   # UNNECESSARY
#"interior_condition",             # UNNECESSARY
"location",                       # KEEP for JOIN check****
#"mailing_address_1",              # UNNECESSARY
#"mailing_address_2",              # UNNECESSARY
#"mailing_care_of",                # UNNECESSARY
#"mailing_city_state",             # UNNECESSARY
#"mailing_street",                 # UNNECESSARY
#"mailing_zip",                    # UNNECESSARY
"market_value",                   # KEEP ------------------------------------the certified market value of the property.
#"market_value_date",              # UNNECESSARY
#"number_of_bathrooms",            # UNNECESSARY
#"number_of_bedrooms",             # UNNECESSARY
#"number_of_rooms",                # UNNECESSARY
#"number_stories",                 # UNNECESSARY
#"off_street_open",                # UNNECESSARY
#"other_building",                 # UNNECESSARY
"owner_1",                        # KEEP?
"owner_2",                        # KEEP?
"parcel_number",                  # KEEP to JOIN***
#"parcel_shape",                   # UNNECESSARY
#"quality_grade",                  # UNNECESSARY
"recording_date",                 # KEEP? -----------------------------------date the deed was presented to records.
#"registry_number",                # UNNECESSARY
"sale_date",                      # KEEP
"sale_price",                     # KEEP
#"separate_utilities",             # UNNECESSARY
#"sewer",                          # UNNECESSARY
#"site_type",                      # UNNECESSARY
#"state_code",                     # UNNECESSARY
#"street_code",                    # UNNECESSARY
#"street_designation",             # UNNECESSARY
#"street_direction",               # UNNECESSARY
#"street_name",                    # UNNECESSARY
#"suffix",                         # UNNECESSARY
#"taxable_building",               # UNNECESSARY
#"taxable_land",                   # UNNECESSARY
#"topography",                     # UNNECESSARY
"total_area",                     # KEEP
#"total_livable_area",             # UNNECESSARY
#"type_heater",                    # UNNECESSARY
"unfinished",                     # KEEP?
#"unit",                           # UNNECESSARY
#"utility",                        # UNNECESSARY
#"view_type",                      # UNNECESSARY
"year_built",                     # KEEP?
#"year_built_estimate",            # UNNECESSARY
#"zip_code",                       # UNNECESSARY
"zoning",                         # KEEP
"pin",                            # KEEP to JOIN ****
"lat",                            # KEEP****
"lng")                            # KEEP****
# Data wrangling
propertiesData <- properties %>%
dplyr::select(propertiesVars) %>%
rename("address" = location)
unique(propertiesData$unfinished)
# Philadelphia Department of Registration Parcel data (41 variable
parcels <- st_read('https://opendata.arcgis.com/datasets/1c57dd1b3ff84449a4b0e3fb29d3cafd_0.geojson')
# Select useful variables
parcelsVars <-
c(#"OBJECTID",                         # UNNECESSARY
#"RECSUB",                           # UNNECESSARY
#"BASEREG",                          # REPEATED -----------------------------The registry number which there is a deed attached to.
#"MAPREG",                           # UNNECESSARY
#"PARCEL",                           # UNNECESSARY
#"RECMAP",                           # UNNECESSARY
#"STCOD",                            # UNNECESSARY
#"HOUSE",                            # UNNECESSARY
#"SUF",                              # UNNECESSARY
#"UNIT",                             # UNNECESSARY
#"STEX",                             # UNNECESSARY
#"STDIR",                            # UNNECESSARY
#"STNAM",                            # UNNECESSARY
#"STDESSUF",                         # UNNECESSARY
#"ELEV_FLAG",                        # UNNECESSARY
#"TOPELEV",                          # UNNECESSARY
#"BOTELEV",                          # UNNECESSARY
#"CONDOFLAG",                        # UNNECESSARY
#"MATCHFLAG",                        # UNNECESSARY
#"INACTDATE",                        # UNNECESSARY
"ORIG_DATE",                        # ???? ----------------------------------Date of origination
"STATUS",                           # ????
#"GEOID",                            # UNNECESSARY
#"STDES",                            # UNNECESSARY
#"ADDR_SOURCE",                      # UNNECESSARY
"ADDR_STD",                         # KEEP for JOIN check****
#"COMMENTS",                         # UNNECESSARY
"PIN",                              # KEEP ----------------------------------Unique parcel identifier
#"FRAC",                             # UNNECESSARY
#"UNIT_TYPE",                        # UNNECESSARY
#"STEX_FRAC",                        # UNNECESSARY
#"STEX_SUF",                         # UNNECESSARY
#"SEPARATED_RIGHTS",                 # UNNECESSARY ---------------------------Air Rights, Sub Rights, Mixed Rights, Parking, Garage
#"MUNIMENT_TYPE",                    # UNNECESSARY
#"MUNIMENT_ID",                      # UNNECESSARY
#"DOR_REVIEW",                       # UNNECESSARY
#"OPA_REVIEW",                       # UNNECESSARY
#"PWD_REVIEW",                       # UNNECESSARY
"Shape__Area",                      # KEEP
#"Shape__Length",                    # KEEP
"geometry")                         # KEEP
# Data wrangling
parcelsData <- parcels %>%
dplyr::select(parcelsVars) %>%
rename("address" = ADDR_STD)
# visualize
# z <- head(parcelsData, n=10000)
# m(z)
# OpenDataPhilly Vacant Property Indicator - Lots
vacantLand <- read_csv('https://opendata.arcgis.com/datasets/19c35fb02d544a9bad0032b58268c9f9_0.csv')
# Select useful variables --- NO GEOMETRY
vacantLandVars <-
c(#"OBJECTID",                       # UNNECESSARY
"ADDRESS",                        # KEEP for JOIN CHECK
#"OWNER1",                         # REPEATED (in Properties)
#"OWNER2",                         # REPEATED (in Properties)
"BLDG_DESC",                      # ???? ------------------------------------Building description from OPA
"OPA_ID",                         # KEEP to JOIN****
#"LNIADDRESSKEY",                  # UNNECESSARY-----------------------------Unique identifier from Licenses + Inspections
#"COUNCILDISTRICT",                # UNNECESSARY
"ZONINGBASEDISTRICT",             # KEEP***
#"ZIPCODE",                        # UNNECESSARY
"LAND_RANK")                      # KEEP?
#"Shape__Area"                    # KEEP?
#"Shape__Length")                  # UNNECESSARY
# Data wrangling
vacantLandData <- vacantLand %>%
dplyr::select(vacantLandVars) %>%
rename("address" = ADDRESS) %>%
mutate(vacant = 'vacant')
### DEMAND SIDE DATA
initialDate <- as.Date.character('2017-01-01')
# Load PERMITS data from OpenDataPhilly's Carto API
permits <- read_csv('https://phl.carto.com/api/v2/sql?q=SELECT+*,+ST_Y(the_geom)+AS+lat,+ST_X(the_geom)+AS+lng+FROM+permits&filename=permits&format=csv&skipfields=cartodb_id')
# R Markdown options
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F, cache=T)
# LOAD PACKAGES
library(sf)
library(riem)
library(caret)
library(spdep)
library(knitr)
library(gifski)
library(tigris)
library(mapview)
library(geojsonR)
library(tidyverse)
library(lubridate)
library(gganimate)
library(gridExtra)
library(kableExtra)
library(ggplot2)
library(basemaps)
library(ggmap)
# R options setup
options(scipen = 999)
options(tigris_class = "sf")
# additional functions from PPA book
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shortcuts
g <- glimpse
m <- mapview
len <- length
st_c <- st_coordinates
# Gillian's working directory
setwd("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/MUSA801_PLA")
# color scheme
# https://coolors.co/b98b73-cb997e-ddbea9-ffe8d6-d4c7b0-b7b7a4-a5a58d-6b705c-3f4238
gillianpick <- c("#3f4238", "#b98b73", "#ddbea9")
#               dark green, dark brown, lighter brown
?scale_fill_viridis()
?scale_color_viridis
??scale_color_viridis
library(viridis)
# ggplot map theme for us to build on
mapTheme_ggplot <- function() {
theme(
rect = element_rect(fill = "transparent")
)
}
# save ggplot map configurations
mapSave_ggplot <- function(fileName) {
ggsave(paste("visualizations/1st_presentation/", fileName, ".png", sep=""),
plot = last_plot(), dpi = 300,
width = 8, height = 5, units = "in", bg = "transparent")
}
vacantLandProps <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/vacantLandProps.rds")
parcelsProps <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/parcelProps.rds")
permitsProps <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/permitsProps.rds")
transfersProps <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/transfersProps.rds")
delinquenciesProps <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/delinquenciesProps.rds")
phlcrs <- 'EPSG:32129' #'EPSG:3364' #'EPSG:4269'
# get geometry for the county of Philadelphia
phlcounty <- tigris::counties(state = 42) %>%
filter(GEOID == '42101') %>%
dplyr::select(GEOID, geometry) %>%
st_transform(st_crs(phlcrs))
fishnet <- phlcounty %>%
st_make_grid(.,
cellsize = 250,
square = TRUE) %>%
.[phlcounty] %>%                     # clip to Philadelphia County boundary
st_sf() %>%
mutate(uniqueID = rownames(.))
# base_map <- get_stamenmap(c(left = -75.34937, bottom = 39.84524, right = -74.92109, top = 40.17457),
#                            maptype = "terrain-background") # square
base_map <- get_stamenmap(c(left = -75.54937, bottom = 39.84524, right = -74.82109, top = 40.17457),
maptype = "terrain-background") # rectangle (wider)
delinquentVacantProps <- left_join(vacantLandProps,
delinquenciesProps %>%
st_drop_geometry(.) %>%
mutate(delinquentStatus = 1),
by="parcel_number") %>%
mutate(delinquentStatus = ifelse(is.na(delinquentStatus)==F, 1, 0))
# how many vacant delinquent?
num_delinquentVacant = sum(delinquentVacantProps$delinquentStatus, na.rm = T)
share_delinquentVacant = num_delinquentVacant/nrow(vacantLandProps)
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps,
aes(color=factor(delinquentStatus)),
show.legend = "point", size = 1, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
#mapSave_ggplot("delinquentVacantProperties")
delinquentVacantNet <- delinquentVacantProps %>%
select(delinquentStatus) %>%
aggregate(fishnet, sum) %>%
mutate(countDelinquent = replace_na(delinquentStatus, 0)) %>%
select(-delinquentStatus) %>%
mutate(uniqueID = rownames(.)) %>%
mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantNet, aes(fill=countDelinquent), inherit.aes = FALSE) +
scale_fill_viridis( name="legend") +
coord_sf(crs = st_crs(4326))
mapSave_ggplot("delinquentVacantProperties_fishnet")
View(delinquentVacantNet)
View(delinquentVacantProps)
unique(delinquentVacantProps)
unique(delinquentVacantProps$vacant)
delinquentVacantNet <- delinquentVacantProps %>%
select(delinquentStatus) %>%
aggregate(fishnet, sum) %>%
mutate(countDelinquent = replace_na(delinquentStatus, 0)) %>%
select(-delinquentStatus, vacant) %>%
mutate(vacant = 1) %>%
aggregate(fishnet, sum) %>%
mutate(vacant = replace_na(vacant, 0)) %>%
mutate(uniqueID = rownames(.),) %>%
mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
vacantNet <- VacantLandProps %>%
select(vacant) %>%
mutate(vacant=1) %>%
aggregate(fishnet, sum) %>%
mutate(uniqueID = rownames(.),) %>%
mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
vacantNet <- vacantLandProps %>%
select(vacant) %>%
mutate(vacant=1) %>%
aggregate(fishnet, sum) %>%
mutate(uniqueID = rownames(.),) %>%
mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
View(vacantNet)
delinquentVacantNet <- delinquentVacantProps %>%
select(delinquentStatus, vacant) %>%
aggregate(fishnet, sum) %>%
mutate(countDelinquent = replace_na(delinquentStatus, 0)) %>%
select(-delinquentStatus, vacant) %>%
mutate(vacant = 1) %>%
aggregate(fishnet, sum) %>%
mutate(vacant = replace_na(vacant, 0)) %>%
mutate(uniqueID = rownames(.),) %>%
mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
delinquentVacantNet <- delinquentVacantProps %>%
mutate(vacant = 1) %>%
select(delinquentStatus, vacant) %>%
aggregate(fishnet, sum) %>%
mutate(countDelinquent = replace_na(delinquentStatus, 0)) %>%
select(-delinquentStatus) #%>%
View(delinquentVacantNet)
delinquentVacantNet <- delinquentVacantProps %>%
mutate(vacant = 1) %>%
select(delinquentStatus, vacant) %>%
aggregate(fishnet, sum) %>%
mutate(countDelinquent = replace_na(delinquentStatus, 0),
vacant = replace_na(vacant, 0)) %>%
select(-delinquentStatus) %>%
mutate(uniqueID = rownames(.),) %>%
mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=subset(delinquentVacantNet, vacant==1), aes(fill=countDelinquent), inherit.aes = FALSE) +
scale_fill_viridis(name="legend") +
coord_sf(crs = st_crs(4326))
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=subset(delinquentVacantNet, vacant>0), aes(fill=countDelinquent), inherit.aes = FALSE) +
scale_fill_viridis(name="legend") +
coord_sf(crs = st_crs(4326))
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=subset(delinquentVacantNet, vacant>0), aes(fill=countDelinquent), inherit.aes = FALSE) +
scale_fill_viridis(name="delinquencies") +
coord_sf(crs = st_crs(4326))
mapSave_ggplot("delinquentVacantProperties_fishnet")
View(vacantLandProps)
length(unique(vacantLandProps$parcel_number))
share_delinquentVacant = num_delinquentVacant/length(unique(vacantLandProps$parcel_number))
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=vacantLandProps, color=gillianpick[2],
size = 1, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, fill=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=vacantLandProps, color=gillianpick[2],
size = 1, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=vacantLandProps, fill=gillianpick[2],
size = 1, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
geom_sf(data=vacantLandProps, color=gillianpick[2],
inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=vacantLandProps, color=gillianpick[2], inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=vacantLandProps, color=gillianpick[2], inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, fill=NA, size=2, inherit.aes = FALSE) +
geom_sf(data=vacantLandProps, color=gillianpick[2],
inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=vacantLandProps, color=gillianpick[2],
inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
mapSave_ggplot("vacantProperties")
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps,
aes(color=factor(delinquentStatus)),
show.legend = "point", size = 1, inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
mapSave_ggplot("delinquentVacantProperties")
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=subset(delinquentVacantNet, vacant>0), aes(fill=countDelinquent), inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
scale_fill_viridis(name="delinquencies") +
coord_sf(crs = st_crs(4326))
mapSave_ggplot("delinquentVacantProperties_fishnet")
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=vacantLandProps, color=gillianpick[2], size=0.01,
inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
mapTheme_ggplot()
mapSave_ggplot("vacantProperties")
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps, size=0.01,
aes(color=factor(delinquentStatus)),
show.legend = "point", size = 1, inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps,
aes(color=factor(delinquentStatus)),
show.legend = "point", size = 0.01, inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
# color scheme
# https://coolors.co/b98b73-cb997e-ddbea9-ffe8d6-d4c7b0-b7b7a4-a5a58d-6b705c-3f4238
gillianpick <- c("#3f4238", "#b98b73", "#f6bd60")
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps,
aes(color=factor(delinquentStatus)),
show.legend = "point", size = 0.01, inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps,
aes(color=factor(delinquentStatus)),
size = 0.01, inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps,
aes(color=factor(delinquentStatus)),
size = 0.001, inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
ggmap(base_map) +
geom_sf(data=phlcounty, inherit.aes = FALSE) +
geom_sf(data=delinquentVacantProps,
aes(color=factor(delinquentStatus)),
size = 0.01, inherit.aes = FALSE) +
geom_sf(data=phlcounty, color=gillianpick[1], fill=NA, size=2, inherit.aes = FALSE) +
coord_sf(crs = st_crs(4326)) +
scale_color_manual("delinquent", values= c(gillianpick[2], gillianpick[3]), labels= c("no", "yes")) +
mapTheme_ggplot()
mapSave_ggplot("delinquentVacantProperties")
