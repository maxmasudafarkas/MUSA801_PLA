dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
z <-
completeNet %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
View(z)
z <-
completeNet %>%
dplyr::select(dep_var, all_of(ind_var_list), uniqueID) %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
z <-
completeNet %>%
dplyr::select(dep_var, all_of(ind_var_list), uniqueID)
z <-
completeNet %>%
dplyr::select(dep_var, all_of(ind_var_list), uniqueID) %>%
gather(key = c(year, uniqueID), value, -dep_var)
z <-
completeNet %>%
dplyr::select(dep_var, all_of(ind_var_list), uniqueID)
z <-
completeNet %>%
dplyr::select(dep_var, all_of(ind_var_list))
z <-
completeNet %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var)
z <-
completeNet %>%
group_by(year, uniqueID) %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var)
z <-
completeNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list))
ind_var_list <- varsPrice
dep_var <- 'permitCount'
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list))
View(z)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_sf() %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_sf(., sf_column_name = 'geometry')
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_sf(., sf_column_name = 'geometry') %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var)
z <-
featuresNet %>%
ungroup() %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
dat_by.stop_ACS <- z
plot <- ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
facet_wrap_paginate(~ key, scales = "free", ncol = 2, nrow = 2)
plot
z <-
featuresNet %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
dat_by.stop_ACS <- z
plot <- ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
facet_wrap_paginate(~ key, scales = "free", ncol = 2, nrow = 2)
dat_by.stop_ACS <-
net %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
plot <- ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
facet_wrap_paginate(~ key, scales = "free", ncol = 2, nrow = 2)
View(dat_by.stop_ACS)
# Function to plot scatterplots
plotXY <-
function(net, ind_var_list, dep_var) {
dat_by.stop_ACS <-
net %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
plot <- ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
facet_wrap_paginate(~ key, scales = "free", ncol = 2, nrow = 2)
for (i in seq(n_pages(plot))) {
print(
ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
geom_smooth(method = "glm", aes_string(x="value", y=dep_var), color="#10767F", size = 1) +
scale_y_continuous(limits=c(-1.5, 30)) +
scale_x_continuous(name = substitute(ind_var_list)) +
facet_wrap_paginate(~ key, scales = "free_x", ncol = 3, page=i) +
labs(title = paste("relationship between",
substitute(dep_var),
"and predictor variables"),
subtitle = "(continous outcomes for numeric variables)") +
theme(legend.position = "right")
)
# Save the plots locally
ggsave(paste("../plots/scatterplots/",
substitute(ind_var_list), i, ".png", sep=""),
plot = last_plot(),
dpi = 300,
width = 8,
height = 5,
units = "in")
}
}
plotXY(featuresNet, varsTime, "permitCount")
plotXY(featuresNet, varsRealEstate, "permitCount")
plotXY(featuresNet, varsRealEstate, "permitCount")
plotXY(featuresNet, varsPrice, "permitCount")
substitute(ind_var_list)
paste0(substitute(ind_var_list), 'hola')
# Function to plot scatterplots
plotXY <-
function(net, ind_var_list, dep_var) {
dat_by.stop_ACS <-
net %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
plot <- ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
facet_wrap_paginate(~ key, scales = "free", ncol = 2, nrow = 2)
for (i in seq(n_pages(plot))) {
print(
ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
geom_smooth(method = "glm", aes_string(x="value", y=dep_var), color="#10767F", size = 1) +
scale_y_continuous(limits=c(-1.5, 30)) +
scale_x_continuous(name = substitute(ind_var_list)) +
facet_wrap_paginate(~ key, scales = "free_x", ncol = 3, page=i) +
labs(title = paste("relationship between",
substitute(ind_var_list),
"and predictor variables"),
subtitle = "(continous outcomes for numeric variables)") +
theme(legend.position = "right")
)
# Save the plots locally
ggsave(paste("../plots/scatterplots/",
substitute(ind_var_list), i, ".png", sep=""),
plot = last_plot(),
dpi = 300,
width = 8,
height = 5,
units = "in")
}
}
plotXY(featuresNet, varsIncome, "permitCount")
# Function to plot scatterplots
plotXY <-
function(net, ind_var_list, dep_var) {
dat_by.stop_ACS <-
net %>%
dplyr::select(dep_var, all_of(ind_var_list)) %>%
st_drop_geometry() %>%
gather(key, value, -dep_var) %>%
mutate(key = fct_relevel(key, ind_var_list))
plot <- ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
facet_wrap_paginate(~ key, scales = "free", ncol = 2, nrow = 2)
for (i in seq(n_pages(plot))) {
print(
ggplot(dat_by.stop_ACS) +
geom_point(aes_string("value", dep_var), color="#18B6C4") +
geom_smooth(method = "glm", aes_string(x="value", y=dep_var), color="#10767F", size = 1) +
scale_y_continuous(limits=c(-1.5, 30)) +
scale_x_continuous(name = substitute(ind_var_list)) +
facet_wrap_paginate(~ key, scales = "free_x", ncol = 3, page=i) +
labs(title = paste("relationship between",
substitute(ind_var_list),
"and permits count"),
subtitle = "(continous outcomes for numeric variables)") +
theme(legend.position = "right")
)
# Save the plots locally
ggsave(paste("../plots/scatterplots/",
substitute(ind_var_list), i, ".png", sep=""),
plot = last_plot(),
dpi = 300,
width = 8,
height = 5,
units = "in")
}
}
doRegression <-
function (dep, indep) {
modsum <- summary(lm (dep ~ indep))
modtab <- c(
modsum$coefficients[, 1],
modsum$coefficients[, 2],
modsum$coefficients[, 3],
modsum$coefficients[, 4],
modsum$adj.r.squared)
round(modtab,digits = 6)
}
getBivariate <-
function(dat_dep, dat_ind, method = "original") {
# empty lists
tab <- c()
rname <- c()
dep_i = 0
ind_i = 0
#
for (y in dat_dep) {
if (ind_i == length(dat_dep)) {
break
}
#
dep_i = dep_i + 1
#
if (method == "logY") {
dep_name = paste("log", colnames(dat_dep[dep_i]), sep = "_")
} else if (
method == "logposY") {
dep_name = paste("logpos", colnames(dat_dep[dep_i]), sep = "_")
} else {
dep_name = colnames(dat_dep[dep_i])
}
# loop through independent variables
for (x in dat_ind) {
if (ind_i == length(dat_ind)) {
ind_i = 0
}
ind_i = ind_i + 1
ind_name = colnames(dat_ind[ind_i])
res <- doRegression(y, x)
tab <- rbind(tab, res)
rname <- append(rname, paste(dep_name, ind_name, sep="~"))
}
}
# turn results into dataframe and name columns
tab <- as.data.frame(tab)
colnames(tab) = c("Int", "Beta", "stErrorInt", "StErrorBeta", "TSTATInt", "TSTATBeta", "PVALINT", "PVALBeta", "R2")
rownames(tab) = rname
return(tab)
}
modelSpecs <- function(model, test, output = "confusionMatrix") {
modelOut <-
data.frame(outcome = as.factor(test$permitDummy),
probs = predict(model, test, type="response"))
# calculate AUC
modelAUC <- pROC::auc(as.factor(test$permitDummy), as.numeric(modelOut$probs))
# calculate threshold and confusion matrix to evaluate model
pred <-
prediction(modelOut[is.na(modelOut$probs)==FALSE,]$probs,
modelOut[is.na(modelOut$probs)==FALSE,]$outcome)
f_perf <-
performance(pred,"f")
f_score <-
c(f_perf@y.values[[1]])
cutoff <-
c(f_perf@x.values[[1]])
f_scoreTable <-
data.frame(
cbind(f_score, cutoff))
fscore <- f_scoreTable[which.max(f_scoreTable$f_score),]
modelOut <-
modelOut %>%
mutate(predOutcome = as.factor(ifelse(modelOut$probs > fscore$cutoff, 1, 0)))
confusionMatrix <-
caret::confusionMatrix(
modelOut$predOutcome,
modelOut$outcome,
positive = "1")
if (output == "confusionMatrix") {
return(confusionMatrix)
} else if(output == "AUC") {
return(modelAUC)
}
}
# CROSSVALIDATION FUNCTIONS
crossValidate <- function(dataset, id, dependentVariable, indVariables) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
foldTrain <-
filter(dataset,
dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
foldTest <-
filter(dataset,
dataset[[id]] == thisFold) %>%
as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
model <-
randomForest(
dependentVariable ~ .,
data = foldTrain)
thisPrediction <-
mutate(foldTest, Prediction = ifelse(predict(model, foldTest, type = "response") > 0.3944, 1, 0))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(allPredictions)
}
# get Accuracy function
getAccuracy <-
function(cm) {
acc <- cm$overall[['Accuracy']]
return(acc)
}
# dependent variable as a continuous count outcome
dep <-
featuresNet %>%
dplyr::select(permitCount)
# dependent variable as a binary outcome (0 or 1)
depBinary <-
featuresNet %>%
dplyr::select(permitDummyNumeric)
# independent variables without year and dependent variables.
indep <-
featuresNet %>%
dplyr::select(
-permitCount,
-year,
-permitYear,
-permitDummyNumeric,
-permitDummy)
# run bivariate regressions
# continuous outcome
regCont <-
as.data.frame(getBivariate(dep, indep))
type(indep)
typeof(indep)
# independent variables without year and dependent variables.
indep <-
featuresNet %>%
dplyr::select(
-permitCount,
-year,
-permitYear,
-permitDummyNumeric,
-permitDummy)
View(indep)
typeof(indep)
dat_dep <- dep
dat_ind <- indep
method = "original"
# empty lists
tab <- c()
rname <- c()
dep_i = 0
ind_i = 0
#
for (y in dat_dep) {
if (ind_i == length(dat_dep)) {
break
}
#
dep_i = dep_i + 1
#
if (method == "logY") {
dep_name = paste("log", colnames(dat_dep[dep_i]), sep = "_")
} else if (
method == "logposY") {
dep_name = paste("logpos", colnames(dat_dep[dep_i]), sep = "_")
} else {
dep_name = colnames(dat_dep[dep_i])
}
#
for (y in dat_dep) {
if (ind_i == length(dat_dep)) {
break
}
#
dep_i = dep_i + 1
#
if (method == "logY") {
dep_name = paste("log", colnames(dat_dep[dep_i]), sep = "_")
} else if (
method == "logposY") {
dep_name = paste("logpos", colnames(dat_dep[dep_i]), sep = "_")
} else {
dep_name = colnames(dat_dep[dep_i])
}
# loop through independent variables
for (x in dat_ind) {
if (ind_i == length(dat_ind)) {
ind_i = 0
}
ind_i = ind_i + 1
ind_name = colnames(dat_ind[ind_i])
res <- doRegression(y, x)
tab <- rbind(tab, res)
rname <- append(rname, paste(dep_name, ind_name, sep="~"))
}
}
# turn results into dataframe and name columns
tab <- as.data.frame(tab)
colnames(tab) = c("Int", "Beta", "stErrorInt", "StErrorBeta", "TSTATInt", "TSTATBeta", "PVALINT", "PVALBeta", "R2")
rownames(tab) = rname
tab
get_bivReg <-
function(dat_dep, dat_ind, method = "original") {
# empty lists
tab <- c()
rname <- c()
dep_i = 0
ind_i = 0
#
for (y in dat_dep) {
if (ind_i == length(dat_dep)) {
break
}
#
dep_i =+ 1
#
if (method == "logY") {
dep_name = paste("log", colnames(dat_dep[dep_i]), sep = "_")
} else if (
method == "logposY") {
dep_name = paste("logpos", colnames(dat_dep[dep_i]), sep = "_")
} else {
dep_name = colnames(dat_dep[dep_i])
}
# loop through independent variables
for (x in dat_ind) {
if (ind_i == length(dat_ind)) {
ind_i = 0
}
ind_i =+ 1
ind_name = colnames(dat_ind[ind_i])
res <- do.regression(y, x)
tab <- rbind(tab, res)
rname <- append(rname, paste(dep_name, ind_name, sep="~"))
}
}
# turn results into dataframe and name columns
tab <- as.data.frame(tab)
colnames(tab) = c("Int", "Beta", "stErrorInt", "StErrorBeta", "TSTATInt", "TSTATBeta", "PVALINT", "PVALBeta", "R2")
rownames(tab) = rname
return(tab)
}
# dependent variable as a continuous count outcome
dep <-
featuresNet %>%
dplyr::select(permitCount)
# dependent variable as a binary outcome (0 or 1)
depBinary <-
featuresNet %>%
dplyr::select(permitDummyNumeric)
# independent variables without year and dependent variables.
indep <-
featuresNet %>%
dplyr::select(
-permitCount,
-year,
-permitYear,
-permitDummyNumeric,
-permitDummy)
get_bivReg(dep, indep)
