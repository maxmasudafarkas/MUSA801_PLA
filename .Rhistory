salesNetYears <-
salesProps %>%
filter(year < 2019 && year > 2015) %>%
st_join(fishnet, left = F) %>%
group_by(year, uniqueID) %>%
summarize(salesCount = sum(n())) %>%
st_drop_geometry() %>%
left_join(., fishnet) %>%
st_sf()
salesNetPeriods <-
salesProps %>%
filter(year < 2019 && year > 2015) %>%
st_join(fishnet, left = F) %>%
group_by(period, uniqueID) %>%
summarize(salesCount = sum(n())) %>%
st_drop_geometry() %>%
left_join(., fishnet) %>%
st_sf()
View(salesNetPeriods)
len(fishnet)
g(fishnet)
z <- salesNetYears %>% filter(year = 2018)
z <- salesNetYears %>% filter(year == 2018)
g(fishnet)
m(salesNet, zcol = 'salesCount')
??st_join
salesNetYears <-
salesProps %>%
filter(year < 2019 && year > 2015) %>%
st_join(fishnet, left = T) %>%
group_by(year, uniqueID) %>%
summarize(salesCount = sum(n())) %>%
st_drop_geometry() %>%
left_join(., fishnet) %>%
st_sf()
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F)
# Load libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat)
library(raster)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(mapview)
# functions
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shorcuts
g <- glimpse
m <- mapview
st_c <- st_coordinates
st_coid <- st_centroid
# redefine Cross validate
crossValidate <- function(dataset, id, dependentVariable, indVariables, indVariableName) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
regression <-
glm(countOccurrences ~ ., family = "poisson",
data = fold.train %>%
dplyr::select(-geometry, -id))
thisPrediction <-
mutate(fold.test, Prediction = predict(regression, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(st_sf(allPredictions))
}
# set map theme
mapTheme <-
function(base_size = 12, title_size = 16) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black"),
plot.subtitle=element_text(face="italic", size = 10),
plot.caption=element_text(hjust=0),
legend.text=element_text(size=6),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "#dfdfdf"),
axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.text.x = element_text(size = 14))
}
# imperial to metric
feetM = 3.28084
# census API key:
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = FALSE)
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F)
# Load libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat)
library(raster)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(mapview)
# functions
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shorcuts
g <- glimpse
m <- mapview
st_c <- st_coordinates
st_coid <- st_centroid
# redefine Cross validate
crossValidate <- function(dataset, id, dependentVariable, indVariables, indVariableName) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
regression <-
glm(countOccurrences ~ ., family = "poisson",
data = fold.train %>%
dplyr::select(-geometry, -id))
thisPrediction <-
mutate(fold.test, Prediction = predict(regression, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(st_sf(allPredictions))
}
# set map theme
mapTheme <-
function(base_size = 12, title_size = 16) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black"),
plot.subtitle=element_text(face="italic", size = 10),
plot.caption=element_text(hjust=0),
legend.text=element_text(size=6),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "#dfdfdf"),
axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.text.x = element_text(size = 14))
}
# imperial to metric
feetM = 3.28084
# census API key:
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = FALSE)
# import police districts
policeDistricts <-
st_read("https://data.cityofchicago.org/api/geospatial/fthy-xz3r?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = dist_num)
# import sub-district policing units called 'Beats'
policeBeats <-
st_read("https://data.cityofchicago.org/api/geospatial/aerh-rz74?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = beat_num)
# Join both boundary units in one list
bothPoliceUnits <- rbind(mutate(policeDistricts, Legend = "Police Districts"),
mutate(policeBeats, Legend = "Police Beats"))
# import Chicago city boundary
chicagoBoundary <-
st_read(file.path(root.dir,"/Chapter5/chicagoBoundary.geojson")) %>%
st_transform('ESRI:102271')
# import neighborhood boundaries for LOOCV
neighborhoods <-
st_read("https://raw.githubusercontent.com/blackmad/neighborhoods/master/chicago.geojson") %>%
st_transform('ESRI:102271') %>%
filter(cartodb_id != 52) # Remove O'Hare airport neighborhood
# point in the Loop to calculate distance to
loopPoint <-
filter(neighborhoods, name == "Loop") %>%
st_centroid()
tracts18 <-
get_acs(geography = "tract",
variables = c("B01001_001E","B01001A_001E"),
year = 2018,
state=17,
county=031,
geometry=T) %>%
st_transform('ESRI:102271')  %>%
dplyr::select(variable, estimate, GEOID) %>%
spread(variable, estimate) %>%
rename(TotalPop = B01001_001,
NumberWhites = B01001A_001) %>%
mutate(percentWhite = NumberWhites / TotalPop,
raceContext = ifelse(percentWhite > .5, "MajorityWhite", "MajorityNonWhite")) %>%
.[neighborhoods,]
# import offenses to explore which could have more selection bias than burglaries
crimes <- read.socrata("https://data.cityofchicago.org/Public-Safety/Crimes-2017/d62x-nvdr")
crimeTypes <- crimes %>%
dplyr::select(Primary.Type, Description)
crimeCategories <- unique(crimeTypes$Primary.Type)
crimeCatalog <- list()
for (crime in crimeCategories){
crimeType <- crimeTypes %>% filter(Primary.Type == crime)
crimeCatalog[[crime]] <- unique(crimeType$Description)
}
# domestic battery
battery <- do.call(cbind.data.frame, crimeCatalog['BATTERY'])
domesticBattery <- battery %>% filter(., grepl("DOMESTIC", BATTERY))
# plug-in the crime
crimeSubtype <- domesticBattery
crimeType <- names(crimeSubtype)
# clean and reproject
occurrences <-
crimes %>%
filter(Primary.Type == crimeType &
Description %in% unlist(apply(crimeSubtype, 1, list), recursive = FALSE)) %>%
mutate(x = gsub("[()]", "", Location)) %>%
separate(x,into= c("Y","X"), sep=",") %>%
mutate(X = as.numeric(X),Y = as.numeric(Y)) %>%
na.omit() %>%
st_as_sf(coords = c("X", "Y"), crs = 4326, agr = "constant")%>%
st_transform('ESRI:102271') %>%
distinct()
# set up the fishnet bins to classify the points
fishnet <-
st_make_grid(chicagoBoundary,
cellsize = 500,
square = TRUE) %>%
.[chicagoBoundary] %>%             # clip to chicago boundary
st_sf() %>%
mutate(uniqueID = rownames(.))
# add a value of 1 to each occurence and join them to the fishnet
occurrenceNet <-
dplyr::select(occurrences) %>%
mutate(countOccurrences = 1) %>%
aggregate(., fishnet, sum) %>%                       # used as a spatial join that sums
mutate(countOccurrences = replace_na(countOccurrences, 0),
uniqueID = rownames(.),
cvID = sample(round(nrow(fishnet) / 24),      # random cross validation ID (out of 100) for later use
size=nrow(fishnet), replace = TRUE))
# plot two side-by-side maps of incidents and their density in the fishnet
grid.arrange(ncol=2,
ggplot() +
geom_sf(data = neighborhoods, colour = "#888888", fill= "#96ecff") +
geom_sf(data = chicagoBoundary, colour = "#686868", fill = NA, size = 0.6) +
geom_sf(data = sample_n(occurrences, 1500), size = .5, colour = "#ff3300", alpha = 0.5) +
scale_fill_viridis(discrete = TRUE) +
labs(title="Domestic Battery in Chicago, 2007",
subtitle="Incidents",
caption = "Source: Chicago Data Portal") +
mapTheme(title_size = 14) +
theme(plot.margin=unit(c(1,-1,1,1), "cm")),
ggplot() +
geom_sf(data = neighborhoods, colour = "#aaaaaa", fill=NA) +
geom_sf(data = occurrenceNet, aes(fill = countOccurrences), color = NA) +
scale_fill_viridis(option = "inferno") +
labs(title="",
subtitle="Density of incidents",
caption = "") +
mapTheme(title_size = 12)+
theme(plot.margin=unit(c(1,1,1,-1), "cm"),
legend.position = "right",
legend.title=element_blank())
)
sanitationCode <-
read.socrata("https://data.cityofchicago.org/Service-Requests/311-Service-Requests-Sanitation-Code-Complaints-Hi/me59-5fac") %>%
mutate(year = substr(creation_date, 1, 4)) %>%
filter(year == "2017") %>%
dplyr::select(Y= latitude, X=longitude) %>%
na.omit() %>%
st_as_sf(coords = c('X', 'Y'), crs = 4326, agr = 'constant') %>%
st_transform(st_crs(fishnet)) %>%
mutate(Legend = "sanitation")
rodentBait <-
read.socrata("https://data.cityofchicago.org/Service-Requests/311-Service-Requests-Rodent-Baiting-No-Duplicates/uqhs-j723") %>%
mutate(year = substr(Creation.Date,1,4)) %>%
filter(year == "2017",
Most.Recent.Action == "Inspected and baited",
Number.of.Premises.with.Rats > 0,
Number.of.Premises.with.Garbage > 0) %>%
dplyr::select(Y = Latitude, X = Longitude) %>%
na.omit() %>%
st_as_sf(coords = c('X', 'Y'), crs = 4326, agr = 'constant') %>%
st_transform(st_crs(fishnet)) %>%
mutate(Legend = "rodents")
buildingCode <-
read.socrata("https://data.cityofchicago.org/Buildings/Building-Violations/22u3-xenr") %>%
mutate(year = substr(violation_date, 1, 4)) %>%
filter(year == "2017") %>%
filter(inspection_status == "FAILED")%>%
dplyr::select(Y = latitude, X = longitude) %>%
na.omit() %>%
st_as_sf(coords = c('X','Y'), crs = 4326, agr = 'constant') %>%
st_transform(st_crs(fishnet)) %>%
mutate(Legend = "buildingViolations")
liquorLicenses <-
read.socrata('https://data.cityofchicago.org/api/views/nrmj-3kcf/rows.json') %>%
dplyr::select(Y = LATITUDE, X = LONGITUDE) %>%
na.omit() %>%
st_as_sf(coords = c('X','Y'), crs = 4326, agr = 'constant') %>%
st_transform(st_crs(fishnet)) %>%
mutate(Legend = 'liquorSell')
# Ordinance violations
varsNet <-
rbind(buildingCode,
liquorLicenses,
rodentBait,
sanitationCode) %>%
st_join(., fishnet, join=st_within) %>%
st_drop_geometry() %>%
group_by(uniqueID, Legend) %>%
summarize(count = n()) %>%
full_join(fishnet) %>%
spread(Legend, count, fill=0) %>%
st_sf() %>%
dplyr::select(-`<NA>`) %>%
na.omit() %>%
ungroup() %>%
mutate(buildingViolations_NN =
nn_function(st_c(st_coid(.)), st_c(buildingCode),3)) %>%
mutate(liquorSell_NN =
nn_function(st_c(st_coid(.)), st_c(liquorLicenses),3)) %>%
mutate(rodents_NN =
nn_function(st_c(st_coid(.)), st_c(rodentBait),3)) %>%
mutate(sanitation_NN =
nn_function(st_c(st_coid(.)), st_c(sanitationCode),3))
# add risk features to a final fishnet
finalNet <-
left_join(occurrenceNet, st_drop_geometry(varsNet), by="uniqueID")
finalNet <-
st_centroid(finalNet) %>%
st_join(dplyr::select(neighborhoods, name), by = "uniqueID") %>%
st_join(dplyr::select(policeDistricts, District), by = "uniqueID") %>%
st_drop_geometry() %>%
left_join(dplyr::select(finalNet, geometry, uniqueID)) %>%
st_sf() %>%
na.omit()
# Visualize the NN features versus the non-NN versions.
varsNet_long <-
gather(varsNet, Variable, value, -geometry, -uniqueID)
vars <- unique(varsNet_long$Variable)
mapList <- list()
for(i in vars){
mapList[[i]] <-
ggplot() +
geom_sf(data = filter(varsNet_long, Variable == i), aes(fill=value), colour=NA) +
scale_fill_viridis(name="", option="inferno") +
guides(fill = guide_colourbar(barwidth = 0.5, barheight = 4)) +
labs(title=i) +
mapTheme(title_size = 8) +
theme(legend.margin=margin(-7,-7,-7,-7))
}
do.call(grid.arrange,c(mapList, ncol=4, top="Risk Factors by Fishnet"))
# Add distance to the Loop feature
finalNet$loopDistance =
st_distance(st_centroid(finalNet),loopPoint) %>%
as.numeric()
correlation_long <-
st_drop_geometry(finalNet) %>%
dplyr::select(-uniqueID, -cvID, -loopDistance, -name, -District) %>%
gather(Variable, Value, -countOccurrences)
correlation_cor <-
correlation_long %>%
group_by(Variable) %>%
summarize(correlation = cor(Value, countOccurrences, use = "complete.obs"))
ggplot(correlation_long, aes(Value, countOccurrences)) +
geom_point(size = 0.1, colour="#ff3300") +
geom_text(data = correlation_cor, aes(label = paste("r =", round(correlation, 2))),
x=-Inf, y=Inf, vjust = 1.5, hjust = -.1) +
geom_smooth(method = "lm", se = FALSE, colour = "#96ecff") +
facet_wrap(~Variable, ncol = 2, scales = "free") +
labs(title = "Domestic battery incidents a function of risk factors") +
plotTheme() +
theme(panel.border = element_blank(),
panel.background = element_rect(fill = "#aaaaaa"),
panel.grid = element_blank(),
#panel.grid.major = element_blank(),
strip.text.x = element_text(size = 8)
)
View(finalNet)
correlation_long <-
st_drop_geometry(finalNet) %>%
dplyr::select(-uniqueID, -cvID, -loopDistance, -name, -District)
View(correlation_long)
correlation_long <-
st_drop_geometry(finalNet) %>%
dplyr::select(-uniqueID, -cvID, -loopDistance, -name, -District) %>%
gather(Variable, Value, -countOccurrences)
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F)
# Load libraries
library(tidyverse)
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F)
# Load libraries
library(tidyverse)
library(tidycensus)
library(sf)
library(RSocrata)
library(viridis)
library(spatstat)
library(raster)
library(spdep)
library(FNN)
library(grid)
library(gridExtra)
library(knitr)
library(kableExtra)
library(mapview)
# functions
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shorcuts
g <- glimpse
m <- mapview
st_c <- st_coordinates
st_coid <- st_centroid
# redefine Cross validate
crossValidate <- function(dataset, id, dependentVariable, indVariables, indVariableName) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
regression <-
glm(countOccurrences ~ ., family = "poisson",
data = fold.train %>%
dplyr::select(-geometry, -id))
thisPrediction <-
mutate(fold.test, Prediction = predict(regression, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(st_sf(allPredictions))
}
# set map theme
mapTheme <-
function(base_size = 12, title_size = 16) {
theme(
text = element_text( color = "black"),
plot.title = element_text(size = title_size, colour = "black"),
plot.subtitle=element_text(face="italic", size = 10),
plot.caption=element_text(hjust=0),
legend.text=element_text(size=6),
axis.ticks = element_blank(),
panel.background = element_rect(fill = "#dfdfdf"),
axis.title = element_blank(),
axis.text = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
strip.text.x = element_text(size = 14))
}
# imperial to metric
feetM = 3.28084
# census API key:
census_api_key("e79f3706b6d61249968c6ce88794f6f556e5bf3d", overwrite = FALSE)
# import police districts
policeDistricts <-
st_read("https://data.cityofchicago.org/api/geospatial/fthy-xz3r?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = dist_num)
# import sub-district policing units called 'Beats'
policeBeats <-
st_read("https://data.cityofchicago.org/api/geospatial/aerh-rz74?method=export&format=GeoJSON") %>%
st_transform('ESRI:102271') %>%
dplyr::select(District = beat_num)
# Join both boundary units in one list
bothPoliceUnits <- rbind(mutate(policeDistricts, Legend = "Police Districts"),
mutate(policeBeats, Legend = "Police Beats"))
library(sf)
# Load libraries
library(tidyverse)
library(tidycensus)
# Load libraries
library(tidyverse)
# Load libraries
library(tidyverse)
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F)
# Load libraries
library(tidyverse)
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F)
# Load libraries
library(tidyverse)
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F)
# Load libraries
library(tidyverse)
