st_union()
### C. Properties
# [source]('https://www.opendataphilly.org/dataset/opa-property-assessments')
# Load properties from 1999 until now from the Office of Property Assessment.
# properties <- read_csv('https://opendata-downloads.s3.amazonaws.com/opa_properties_public.csv')
# OR local load
properties <- readRDS('../data/local/properties.rds')
# Selected variables of interest
propertiesVars <-
c("category_code",                  # KEEP ------------------------------------determines if it is VACANT LAND
#"exterior_condition",             # KEEP ------------------------------------how the exterior appears based on observation.
#"frontage",                       # MODEL
#"location",                       # KEEP for JOIN check****
"market_value",                   # KEEP ------------------------------------the certified market value of the property.
#"off_street_open",                # UNNECESSARY
"owner_1",                        # KEEP
"owner_2",                        # KEEP
"parcel_number",                  # KEEP to JOIN***
#"parcel_shape",                   # MODEL
#"registry_number",                # KEEP to JOIN
"sale_date",                      # KEEP
#"sale_price",                     # KEEP
#"taxable_land",                   # MODEL
#"topography",                     # MODEL
"total_area",                     # KEEP
#"unfinished",                     # UNNECESSARY
"year_built",                     # KEEP
"zoning",                         # KEEP
"pin",                            # KEEP to JOIN ****
"lat",                            # KEEP****
"lng")                            # KEEP****
# Data wrangling
propertiesData <- properties %>%
dplyr::select(propertiesVars) %>%
filter(!is.na(lat), !is.na(lng)) %>%
st_as_sf(coords = c("lat","lng"), crs = 4326) %>%
st_transform(st_crs(phlcrs)) %>%
st_join(demographics)
# save locally
# saveRDS(properties, file = "properties.rds")
# [source]('https://www.opendataphilly.org/dataset/vacant-property-indicators')
# OpenDataPhilly Vacant Property Indicator - Lots
vacantLand <- read_csv('https://opendata.arcgis.com/datasets/19c35fb02d544a9bad0032b58268c9f9_0.csv')
# Select useful variables --- NO GEOMETRY
vacantLandVars <-
c(#"ADDRESS",                        # KEEP for JOIN CHECK
"BLDG_DESC",                      # KEEP ------------------------------------Building description from OPA
"OPA_ID",                         # KEEP to JOIN****
#"ZONINGBASEDISTRICT",             # KEEP***
"LAND_RANK")                      # KEEP?
# Data wrangling
vacantLandData <- vacantLand %>%
dplyr::select(vacantLandVars) %>%
mutate(vacant = 'vacant')
# JOIN to propertiesData
# propertiesData <---> vacantLandData
vacantLandProps <- propertiesData %>%
inner_join(vacantLandData, by=c('parcel_number'='OPA_ID'))
# save locally
# saveRDS(vacantLand, file = "vacantLand.rds")
saveRDS(vacantLandProps, file = "vacantLandProps.rds")
# [source]('https://www.opendataphilly.org/dataset/property-tax-delinquencies')
# Real Estate Delinquencies from OpenData Philly:
delinquencies <- read_csv('https://phl.carto.com/api/v2/sql?q=SELECT+*+FROM+real_estate_tax_delinquencies&filename=real_estate_tax_delinquencies&format=csv&skipfields=cartodb_id,the_geom,the_geom_webmercator')
# Variables - Tax Delinquencies (53 vars)
delinquenciesVars <-
c("opa_number",                     # KEEP to JOIN****
#"street_address",                 # KEEP to JOIN check****
#"owner",                          # UNNECESSARY
#"co_owner",                       # UNNECESSARY
"total_due",                      # KEEP ------------------------------------The total amount owner owes.
"is_actionable",                  # KEEP?*** --------------------------------Action can be taken against the delinquent property.
"num_years_owed",                 # KEEP ***for adverse possession reference
"most_recent_year_owed",          # KEEP for reference
"oldest_year_owed",               # KEEP for reference
"most_recent_payment_date",       # KEEP for reference
#"year_of_last_assessment",        # KEEP for reference
"total_assessment",               # KEEP for reference
#"building_code",                  # ???? ------------------------------------Building codes describe the building.
#"general_building_description",   # ???? ------------------------------------General description of how the building is used.
#"building_category",              # ???? ------------------------------------Type of Building Group (residential, commercial, etc.).
"sheriff_sale",                   # KEEP*** ---------------------------------Property is in the Sheriff Sale Process (any stage).
"liens_sold_1990s",               # KEEP*** ---------------------------------Property was included in 1997 Lien Sale.
"liens_sold_2015")                # KEEP*** ---------------------------------Property is included in Recent Lien Sales.
# Data wrangling
delinquenciesData <- delinquencies %>%
dplyr::select(delinquenciesVars) %>%
mutate(opa_number = sprintf("%09d", opa_number))
# JOIN to properties
# propertiesData <---> delinquenciesData
delinquenciesProps <- propertiesData %>%
inner_join(delinquenciesData, by = c('parcel_number'='opa_number')) %>%
st_sf()
# save locally
# saveRDS(delinquencies, file = "delinquencies.rds")
# map vacant properties (points)
delinquenciesVacantProps <-
left_join(vacantLandProps,
delinquenciesProps %>% st_drop_geometry() %>% mutate(delinquentStatus = 1),
by = "parcel_number") %>%
mutate(delinquentStatus = ifelse(is.na(delinquentStatus) == F, 1, 0),
delinquentType = ifelse(liens_sold_1990s == T, 2, delinquentStatus), # delinquent type: 0 not, 1 yes, 2 us bank
delinquentType = replace_na(delinquentType, 0))
# map vacant properties (fishnet)
delinquenciesVacantNet <- delinquenciesVacantProps %>%
mutate(vacant = 1) %>%
select(delinquentStatus, vacant) %>%
aggregate(fishnet, sum) %>%
mutate(countDelinquent = replace_na(delinquentStatus, 0),
vacant = replace_na(vacant, 0)) %>%
select(-delinquentStatus)
# delinquencies heat map
ggplot() +
geom_sf(data = phlFishnet, color = NA, fill = colors[1]) +
geom_sf(data = subset(delinquenciesVacantNet, vacant > 0), aes(fill = countDelinquent), color = NA, inherit.aes = FALSE) +
scale_fill_viridis(
option = "mako",
trans = "log1p",
direction = 1) +
guides(
size = F,
fill= guide_colorbar(barheight = 7, title.position = "top")) +
labs(title = 'Delinquent Vacant Land Distribution',
subtitle = 'Properties in Philadelphia County',
caption = 'OpenDataPhilly') +
mapTheme() +
theme(axis.text.x = element_blank(),
legend.position = c(0.85, 0.2),
legend.title = element_text(size = 8, color = colors[1], hjust = 0.5),
legend.background = element_blank(),
legend.text = element_text(size = 8),
panel.border = element_blank(),
panel.background = element_rect(fill = colors[2]),
panel.grid = element_blank(),
)
#mapSave_ggplot("delinquentVacantProperties_fishnet")
# [source]('https://www.opendataphilly.org/dataset/real-estate-transfers')
# OpenDataPhilly Endpoint of Property Assessment History:
# transfers <- read_csv('https://opendata-downloads.s3.amazonaws.com/rtt_summary.csv')
# transfers <- read_csv('https://opendata.arcgis.com/datasets/88e5bc291b834606bd49f6fd6dca226e_0.csv')
# OR load locally
transfers <- readRDS('../data/local/transfers.rds')
# OpenDataPhilly - Transfers (48 variables)
transfersVars <-
c("document_type",                # KEEP*** -----------------------------------refers to type of Real Estate Transaction
"display_date",                 # KEEP***
"street_address",               # KEEP for JOIN check
"grantors",                     # KEEP --------------------------------------seller (on deeds), or borrower (on mortgages)
"grantees",                     # KEEP --------------------------------------buyer, recipient, new owner, or lien holder
#"total_consideration",          # KEEP?** -----------------------------------good exchanged for the real estate (usually money)
#"assessed_value",               # KEEP?** -----------------------------------assess value by OPA
#"common_level_ratio",           # UNNECESSARY -------------------------------fair market : assessment values ratio
"fair_market_value",            # KEEP?** -----------------------------------assessment value by common level ratio
#"receipt_date",                 # UNNECESSARY - display_date is used
#"recording_date",               # UNNECESSARY - display_date is used
#"document_date",                # UNNECESSARY - display_date is used
"opa_account_num",              # KEEP****to join
"property_count")               # KEEP --------------------------------------Number of properties in document
# Data wrangling
transfersData <- transfers %>%
dplyr::select(all_of(transfersVars)) %>%
filter(!is.na(opa_account_num)) %>%
filter(document_type %in% c('DEED',
'DEED LAND BANK',
'DEED MISCELLANEOUS',
'DEED MISCELLANEOUS TAXABLE',
'DEED OF CONDEMNATION',
'DEED SHERIFF'))
# JOIN to properties
# propertiesData <---> transfersData
# if a parcel_number has multiple deeds, I manipulated data to shift deed sheriff first
# so distinct() will grab deed sheriff and neglect others
transfersProps <- propertiesData %>%
inner_join(transfersData, by= c('parcel_number'='opa_account_num'))%>%
mutate(document_type = factor(document_type,
labels(c("DEED SHERIFF" = 1,
"DEED" = 2,
"DEED MISCELLANEOUS" = 3,
"DEED OF CONDEMNATION" = 4,
"DEED LAND BANK" = 5,
"DEED MISCELLANEOUS TAXABLE" = 6))))
# save locally
# saveRDS(transfers, file = "transfers.rds")
# sheriff sales after 2021 from client
sheriffSales_21 <- read_csv('./data/sheriffSales_21.csv') %>%
distinct(OPA, .keep_all=TRUE)                                                # remove duplicates
# Sheriff Sales before 2021 from real estate transfers data (completed)
sheriffSales_20 <-
transfersProps %>%
filter(document_type == "DEED SHERIFF") %>%
arrange(parcel_number, document_type) %>%
distinct(parcel_number, .keep_all = TRUE)
# join all sheriff sales info we have together
## sheriff sales data from transfers
sheriffProps <-
left_join(
delinquenciesVacantProps,
st_drop_geometry(sheriffSales_20),
by = "parcel_number") %>%
distinct(parcel_number, .keep_all = T) %>%
merge(., sheriffSales_21,
by.x = "parcel_number", by.y = "OPA", all.x = T, no.dups = T) %>%
mutate(pastSheriffSale = ifelse(document_type == "DEED SHERIFF", 1, 0)) %>%   #  past records only
mutate(pastSheriffSale = replace_na(pastSheriffSale, 0)) %>%
mutate(futureSheriffSale = ifelse(document_type == "DEED SHERIFF" | is.na(Status) == F | sheriff_sale == "Y", 1, 0)) %>% # future
mutate(futureSheriffSale = replace_na(futureSheriffSale, 0)) %>%
mutate(allSheriffSales = ifelse(pastSheriffSale == 1 | futureSheriffSale == 1, 1, 0),
sheriffSaleYear = year(as.Date(display_date)))
# Map sheriff sales in relation to vacant delinquent properties
ggplot() +
geom_sf(data = phlcounty, color = NA, fill = colors[1]) +
geom_sf(data = subset(sheriffProps, delinquentStatus == 1),
aes(color = factor(allSheriffSales)),
size = 0.2) +
scale_color_manual("", values= c(palette[1], palette[6]),
labels= c("vacant delinquent", "sheriffs sale")) +
labs(title = 'Historical Sheriff Sales',
subtitle = 'Vacant Land Properties in Philadelphia County',
caption = 'OpenDataPhilly') +
mapTheme() +
theme(axis.text.x = element_blank(),
legend.position = c(0.85, 0.15),
legend.background = element_blank(),
legend.text = element_text(size=8),
panel.border = element_blank(),
panel.background = element_rect(fill = colors[2]),
panel.grid.major = element_blank()
)
# [source]('https://www.opendataphilly.org/dataset/licenses-and-inspections-building-permits')
# Load PERMITS data from OpenDataPhilly's Carto API
# permits <- read_csv('https://phl.carto.com/api/v2/sql?q=SELECT+*,+ST_Y(the_geom)+AS+lat,+ST_X(the_geom)+AS+lng+FROM+permits&filename=permits&format=csv&skipfields=cartodb_id')
# OR local load
permits <- readRDS('../data/local/permits.rds')
# List the permit data set variables needed
permitsVars <-
c('parcel_id_num',                 # KEEP for JOIN
'permittype',                    # KEEP*****
'permitdescription',             # KEEP for reference
#'commercialorresidential',        # MAYBE
'typeofwork',                    # KEEP****
#'approvedscopeofwork',           # UNNECESSARY - detailed description
'permitissuedate',               # KEEP***
'status',                        # KEEP
'applicanttype',                 # MAYBE
#'contractor[...]',               # UNNECESSARY
'opa_account_num',               # KEEP for JOIN****
#'address',                       # KEEP for JOIN check
#'unit_type',                     # UNNECESSARY
'lng','lat'
#'geometry'
)
# EXAMINE VARIABLES
# permittype
permitTypes <- as.data.frame(table(permits$permittype))
# select permittyoe
permitCats <-
c('BP_NEWCNST',             #    4984   # "2007-01-02" to "2020-02-20"
'BUILDING',               #    8521   # "2015-01-12" to NOW ("2022-01-29")
'RESIDENTIAL BUILDING',   #   15909   # "2015-01-06" to NOW ("2022-01-29")
'ZONING',                 #   11187   # "2015-12-02" to NOW ("2022-01-29")
'ZP_ADMIN',               #     803
'ZP_USE',                 #    9651   # "2007-01-02" to "2020-03-12"
'ZP_ZON/USE',             #   12921   # "2007-01-02" to "2020-03-12"
'ZP_ZONING'               #    7617   # "2007-01-02" to "2020-03-12"
)
# Old categories
permitCatsA <-
c('BP_NEWCNST',             #    4984   # "2007-01-02" to "2020-02-20"
'ZP_ADMIN',               #     803
'ZP_USE',                 #    9651   # "2007-01-02" to "2020-03-12"
'ZP_ZON/USE',             #   12921   # "2007-01-02" to "2020-03-12"
'ZP_ZONING')              #    7617   # "2007-01-02" to "2020-03-12"
# New categories
permitCatsB <-
c('BUILDING',               #    8521   # "2015-01-12" to NOW ("2022-01-29")
'RESIDENTIAL BUILDING',   #   15909   # "2015-01-06" to NOW ("2022-01-29")
'ZONING')                 #   11187   # "2015-12-02" to NOW ("2022-01-29")
# Building categories
permitBuildingCats <-
c('BP_NEWCNST',             #    4984   # "2007-01-02" to "2020-02-20"
'BUILDING',               #    8521   # "2015-01-12" to NOW ("2022-01-29")
'RESIDENTIAL BUILDING')   #   15909   # "2015-01-06" to NOW ("2022-01-29")
# Zoning categories
permitZoningCats <-
c('ZP_ADMIN',               #     803
'ZP_USE',                 #    9651   # "2007-01-02" to "2020-03-12"
'ZP_ZON/USE',             #   12921   # "2007-01-02" to "2020-03-12"
'ZP_ZONING',              #    7617   # "2007-01-02" to "2020-03-12"
'ZONING')                 #   11187   # "2015-12-02" to NOW ("2022-01-29")
# Data wrangling ONE
# Filter data with PERMIT TYPES (building or zoning)
permitsData <- permits %>%
dplyr::select(permitsVars) %>%
filter(permittype %in% permitZoningCats) %>%
filter(!is.na(lat), !is.na(lng)) %>%
st_as_sf(coords = c("lng","lat"), crs = phlcrs)
# type of work across SELECTED categories (48):
permitTypesOfWork <- as.data.frame(table(permitsData$typeofwork))
# All categories
permitTypeOfWorkCats <-
c(#'ADD',                                              #   1665 ***OLD ***ZONING {New construction attached or added to existing}
#'ADDITION AND/OR ALTERATION',                       #  17051 ***NEW ***BUILDING (6290)  ***RESIDENTIAL BUILDING (10761)
#'CHANGE OF USE',                                    #   3046 ***NEW ***ZONING {General change of use}
'COMBINED LOT LINE RELOCATION AND NEW DEVELOPMENT', #    313 ***NEW ***ZONING {Combine or redraw lots} ***SIGNIFICATIVE!
'COMDEM',                                           #   1163 ***OLD ***ZONING {Complete demolition}
'ENTIRE',                                           #   2910 ***OLD ***ZONING (-2890) ***BUILDING {Entire structure}
'ENTSTR',                                           #   3638 ***OLD ***ZONING
'FULL DEMOLITION',                                  #    644 ***NEW ***ZONING {Full demolition}
'LOT LINE RELOCATION',                              #    317 ***NEW ***ZONING {Combine or redraw lots} ***SIGNIFICATIVE!
'LOTLIN',                                           #   2527 ***OLD ***ZONING {Combine or redraw lots} ***SIGNIFICATIVE!
'NEW CONSTRUCTION',                                 #<- 6292 ***NEW ***BUILDING (1812) ***RESIDENTIAL BUILDING (4480)
'NEW CONSTRUCTION (SHELL ONLY)',                    #<-   19 ***NEW ***BUILDING
#'NEW CONSTRUCTION (STAND ALONE)',                   #<-   48 ***NEW ***RESIDENTIAL BUILDING
'NEW CONSTRUCTION, ADDITION, GFA CHANGE',           #<- 4986 ***NEW ***ZONING {New construction attached or added to existing}
'NEWCON'#                                           #<- 5539 ***OLD ***ZONING (-3) ***BUILDING {New construction of structure}
#'PARTCH',                                           #   3317 ***OLD ***ZONING {Change in use}
#'SFADD',                                            #   3149 ***OLD ***ZONING {Add square footage to existing}
)
# Filter data with PERMIT TYPES (building or zoning)
permitsZoningData <- permitsData %>%
filter(typeofwork %in% permitTypeOfWorkCats)
# JOIN to properties
# permitsZoningData <---> propertiesData
permitsProps <- propertiesData %>%
inner_join(st_drop_geometry(permitsZoningData),  by = c('parcel_number'='opa_account_num'))
# permits by quarter by fishnet cell
permitsNet <- permitsProps %>%
st_join(fishnet, left=F) %>%
mutate(year = year(permitissuedate),
month = month(permitissuedate),
quarter = case_when(
month %in% c(1, 2, 3) ~ 1,
month %in% c(4, 5, 6) ~ 2,
month %in% c(7, 8, 9) ~ 3,
month %in% c(10, 11, 12) ~ 4)) %>%
mutate(period = paste(year, quarter, sep='-')) %>%
group_by(period, uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
# random cross validation ID (out of 100) for later use
# mutate(uniqueID = rownames(.)) %>%
# mutate(cvID = sample(round(nrow(fishnet)/24), size=nrow(fishnet), replace=T))
# create empty panel with all possible time/space combinations by fishnet grids
basePanel <-
expand.grid(period = unique(permitsNet$period),
uniqueID = unique(fishnet$uniqueID))
# join panel to fishnet geometry
permitsPanel <-
permitsNet %>%
right_join(basePanel) %>%
replace(is.na(.), 0) %>%
left_join(fishnet) %>%
st_sf()
# save locally
# saveRDS(permits, file = "permits.rds")
allPermitsProps <-
left_join(delinquenciesVacantProps,
st_drop_geometry(permitsProps),
by=c("parcel_number")) %>%
distinct(parcel_number, .keep_all = TRUE)
tabPermitByYr <-
allPermitsProps %>%
filter(is.na(permittype) == F) %>%
group_by(is.na(permittype), year(permitissuedate)) %>%
summarise(countPermit = n()) %>%
st_drop_geometry()
tabPermitAllByYr <-
permitsProps %>%
group_by(is.na(permittype), year(permitissuedate)) %>%
summarise(countPermit = n()) %>%
st_drop_geometry()
tabPermitBothByYr <-
merge(tabPermitByYr, tabPermitAllByYr, by="year(permitissuedate)") %>%
dplyr::select(1,3,5) %>%
rename("year" = 1,
"permitOnVacant" = 2,
"permitPhilly" = 3) %>%
gather(key="variable", value="value", -year)
# chart
tabPermitBothByYr %>%
ggplot(aes(x = year, y = value, color = variable)) +
geom_line(size = 1) +
scale_x_continuous(breaks = seq(from = 2005,
to = 2025,
by = 2)) +
ylab("zoning permits") +
scale_color_manual(values = c(palette[3], palette[6]),
labels = c("Vacant Sites", "Philadelphia"),
name="legend")  +
labs(title = 'Development indictator',
subtitle = 'Zoning permits issued in Philadelphia by vacancy of properties',
caption = 'OpenDataPhilly') +
geom_text(x = 2017, y = 300, label = "", angle = 0) +
theme(legend.position = "right",
legend.title = element_blank(),
panel.background = element_rect(fill = colors[2]),
panel.grid.major.x =  element_blank(),
panel.grid.minor.x =  element_blank()
)
# if a parcel_number has multiple sales, we only get the latest one
salesProps <- transfersProps %>%
drop_na(total_area) %>%
mutate(document_type = as.character(document_type)) %>%  # to ignore Gillian deed factor levels
group_by(parcel_number) %>%
slice(which.max(sale_date)) %>% # to get only the latest one
mutate(year = year(sale_date),
month = month(sale_date),
quarter = case_when(
month %in% c(1, 2, 3) ~ 1,
month %in% c(4, 5, 6) ~ 2,
month %in% c(7, 8, 9) ~ 3,
month %in% c(10, 11, 12) ~ 4)) %>%
mutate(period = paste(year, quarter, sep='-')) %>%
mutate(sqftPrice = fair_market_value/total_area) %>%
st_sf()
g(salesProps)
permitsLastFive <-
permitsProps %>%
filter(year > 2016 && year <= 2021)
permits2018 <-
permitsProps %>%
filter(year == 2018)
permits2019 <-
permitsProps %>%
filter(year == 2019)
#
salesNet <- salesLastFive %>%
st_join(fishnet, left = F) %>%
group_by(period, uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
# All sales BEFORE 2019-01-01
salesNet <-
salesProps %>%
filter(year < 2019)
View(salesNet)
salesProps19 <-
salesProps %>%
filter(year < 2019) %>%
mutate(daysFromLastSale = as.Date.character('2019-01-01') - sale_date)
salesProps19 <-
salesProps %>%
filter(year < 2019) %>%
mutate(daysFromLastSale = difftime(as.Date.character('2019-01-01') - sale_date), units = 'days')
salesProps19 <-
salesProps %>%
filter(year < 2019) %>%
mutate(daysFromLastSale = difftime(as.Date.character('2019-01-01'), sale_date, units = 'days'))
View(salesProps19)
z <- salesProps19 %>%
mutate(daysFromLastSale = drop_units(daysFromLastSale))
z <- salesProps19 %>%
mutate(daysFromLastSale = set_units(NULL))
z <- salesProps19 %>%
dplyr::select(daysFromLastSale)
z <- salesProps19 %>%
dplyr::select(daysFromLastSale) %>%
st_join(fishnet, left = F) %>%
group_by(period, uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
View(salesProps19)
z <- salesProps19 %>%
dplyr::select(daysFromLastSale, uniqueID) %>%
st_join(fishnet, left = F) %>%
group_by(uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
z <- salesProps19 %>%
dplyr::select(daysFromLastSale, uniqueID) %>%
st_join(fishnet, left = F) %>%
group_by(uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
z <- salesProps19 %>%
dplyr::select(daysFromLastSale) %>%
st_join(fishnet, left = F) %>%
group_by(uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
salesNet <- salesProps19 %>%
dplyr::select(daysFromLastSale) %>%
st_join(fishnet, left = F) %>%
group_by(uniqueID) %>%
summarize(permitCount = sum(n())) %>%
st_drop_geometry()
# create empty panel with all possible time/space combinations by fishnet grids
basePanel <-
expand.grid(period = unique(salesNet$period),
uniqueID = unique(fishnet$uniqueID))
# join panel to fishnet geometry
salesPanel <-
salesNet %>%
right_join(basePanel) %>%
replace(is.na(.), 0) %>%
left_join(fishnet) %>%
st_sf()
# join panel to fishnet geometry
salesPanel <-
salesNet %>%
right_join(basePanel) %>%
replace(is.na(.), 0) %>%
left_join(fishnet) %>%
st_sf()
rlang::last_error()
# join panel to fishnet geometry
salesPanel <-
salesNet %>%
right_join(basePanel)
g(salesNet)
g(fishNet)
g(fishnet)
