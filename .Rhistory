table(unique(propertiesData$parcel_number) %in% unique(vacantLandData$OPA_ID))
table(unique(propertiesData$parcel_number) %in% unique(vacantLandData$OPA_ID))
table(unique(vacantLandData$OPA_ID) %in% unique(propertiesData$parcel_number))
len(unique(delinquenciesData$opa_number))
table(unique(permitsData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(parcelsData$opa_account_num))
table(unique(permitsData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(parcelsData$opa_account_num))
table(unique(permitsData$opa_account_num) %in% unique(propertiesData$parcel_number))
len(unique(permitsData$opa_account_num))
len(unique(transfersData$opa_account_num))
len(unique(transfersData$opa_account_num))
table(unique(transfersData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(transfersData$opa_account_num))
2632/258581
table(unique(delinquenciesData$opa_number) %in% unique(propertiesData$parcel_number))
table
table(unique(delinquenciesData$opa_number) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(delinquenciesData$opa_number))
2077/70639
table(unique(transfersData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(transfersData$opa_account_num))
322723/258581
258581/(258581+322723)
table(unique(propertiesData$parcel_number) %in% unique(delinquenciesData$opa_number))
70639/(70639+510665)
table(unique(propertiesData$parcel_number) %in% unique(parcelsData$opa_account_num))
table(unique(propertiesData$parcel_number) %in% unique(permitsData$opa_account_num))
table(unique(permitsData$opa_account_num) %in% unique(propertiesData$parcel_number))
540/31466
31466/(31466+549838)
table(unique(vacantLandData$OPA_ID) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(vacantLandData$OPA_ID))
27579/(27579+553725)
49/27579
table(unique(propertiesData$registry_number) %in% unique(parcels$MAPREG))
58063/508189
58063/(508189+58063)
49/(27579+49)
540/(31466+540)
2077/70639+2077
2077/(70639+2077)
2632/(258581+2632)
table(unique(parcels$MAPREG) %in% unique(propertiesData$registry_number))
table(unique(parcels$MAPREG) %in% unique(propertiesData$registry_number))
58063/(508189+58063) # 10%
94027/(94027+508189)
table(unique(propertiesData$registry_number) %in% unique(parcels$MAPREG))
table(unique(parcels$MAPREG) %in% unique(propertiesData$registry_number))
table(unique(propertiesData$pin) %in% unique(parcelsData$PIN))
table(unique(parcelsData$PIN) %in% unique(propertiesData$pin))
parcelsProps <- propertiesData %>%
st_drop_geometry() %>%
inner_join(parcelsData, by=c('pin'='PIN'))
len(unique(parcelsProps$pin))
table(unique(parcelsData$PIN) %in% unique(parcelsProps$pin))
z <- parcelsData %>%
filter(!pin %in% unique(parcelsProps$pin))
z <- parcelsData %>%
filter(!PIN %in% unique(parcelsProps$pin))
m(z)
z <- propertiesData %>%
filter(!pin %in% unique(parcelsProps$pin))
m(z)
zz <- z %>%
inner_join(., parcelsData, by=c('registry_number'='MAPREG'))
zz <- z %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='MAPREG'))
parcelsVars <-
c(#"OBJECTID",                         # UNNECESSARY
#"RECSUB",                           # UNNECESSARY
"BASEREG",                          # KEEP to JOIN -----------------------------The registry number which there is a deed attached to.
"MAPREG",                           # UNNECESSARY
#"PARCEL",                           # UNNECESSARY
#"RECMAP",                           # UNNECESSARY
#"STCOD",                            # UNNECESSARY
#"HOUSE",                            # UNNECESSARY
#"SUF",                              # UNNECESSARY
#"UNIT",                             # UNNECESSARY
#"STEX",                             # UNNECESSARY
#"STDIR",                            # UNNECESSARY
#"STNAM",                            # UNNECESSARY
#"STDESSUF",                         # UNNECESSARY
#"ELEV_FLAG",                        # UNNECESSARY
#"TOPELEV",                          # UNNECESSARY
#"BOTELEV",                          # UNNECESSARY
#"CONDOFLAG",                        # UNNECESSARY
#"MATCHFLAG",                        # UNNECESSARY
#"INACTDATE",                        # UNNECESSARY
"ORIG_DATE",                        # ???? ----------------------------------Date of origination
"STATUS",                           # ????
"GEOID",                            # FOR REFERENCE
#"STDES",                            # UNNECESSARY
#"ADDR_SOURCE",                      # UNNECESSARY
"ADDR_STD",                         # KEEP for JOIN check****
#"COMMENTS",                         # UNNECESSARY
"PIN",                              # KEEP ----------------------------------Unique parcel identifier
#"FRAC",                             # UNNECESSARY
#"UNIT_TYPE",                        # UNNECESSARY
#"STEX_FRAC",                        # UNNECESSARY
#"STEX_SUF",                         # UNNECESSARY
#"SEPARATED_RIGHTS",                 # UNNECESSARY ---------------------------Air Rights, Sub Rights, Mixed Rights, Parking, Garage
#"MUNIMENT_TYPE",                    # UNNECESSARY
#"MUNIMENT_ID",                      # UNNECESSARY
#"DOR_REVIEW",                       # UNNECESSARY
#"OPA_REVIEW",                       # UNNECESSARY
#"PWD_REVIEW",                       # UNNECESSARY
"Shape__Area",                      # KEEP
#"Shape__Length",                    # KEEP
"geometry")                         # KEEP
# Data wrangling
parcelsData <- parcels %>%
dplyr::select(parcelsVars) %>%
rename("address" = ADDR_STD)
zz <- z %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='MAPREG'))
zz <- z %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='MAPREG'))
table( unique(z$registry_number) %in% unique(parcelsData$MAPREG))
len(unique(z$registry_number))
len(unique(parcelsData$MAPREG))
len(unique(zz$registry_number))
mber?
zz <- z %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='BASEREG'))
# join the ones that couldn't be joined by pin with registry number?
zz <- z %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='BASEREG'))
# join propertiesData to parcelData
parcelsProps_A <- propertiesData %>%
st_drop_geometry() %>%
inner_join(parcelsData, by=c('pin'='PIN'))
# get properties that were not joined by pin
notJoined <- propertiesData %>%
filter(!pin %in% unique(parcelsProps$pin))
# join the ones that couldn't be joined by pin=PIN by their registry number?
parcelsProps_B <- notJoined %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='BASEREG'))
parcelsProps <- rbind(parcelsProps_A, parcelsProps_B)
g(parcelsProps_A)
# Load properties from 99 until now from ODP.
#  properties <- read_csv('https://opendata-downloads.s3.amazonaws.com/opa_properties_public.csv')
# Selected variables of interest
propertiesVars <-
c(#"objectid",                       # UNNECESSARY
#"assessment_date",                # UNNECESSARY
#"basements",                      # UNNECESSARY
#"beginning_point",                # UNNECESSARY
#"book_and_page",                  # UNNECESSARY
#"building_code",                  # UNNECESSARY
#"building_code_description",      # UNNECESSARY
"category_code",                  # KEEP ------------------------------------determines if it is VACANT LAND
#"category_code_description",      # KEEP ------------------------------------determines if it is VACANT LAND
#"census_tract",                   # UNNECESSARY
#"central_air",                    # UNNECESSARY
#"cross_reference",                # UNNECESSARY
#"date_exterior_condition",        # UNNECESSARY
#"depth",                          # UNNECESSARY
#"exempt_building",                # UNNECESSARY
#"exempt_land",                    # UNNECESSARY
"exterior_condition",             # KEEP ------------------------------------how the exterior appears based on observation.
#"fireplaces",                     # UNNECESSARY
#"frontage",                       # UNNECESSARY
#"fuel",                           # UNNECESSARY
#"garage_spaces",                  # UNNECESSARY
#"garage_type",                    # UNNECESSARY
#"general_construction",           # UNNECESSARY
#"geographic_ward",                # UNNECESSARY
#"homestead_exemption",            # UNNECESSARY
#"house_extension",                # UNNECESSARY
#"house_number",                   # UNNECESSARY
#"interior_condition",             # UNNECESSARY
"location",                       # KEEP for JOIN check****
#"mailing_address_1",              # UNNECESSARY
#"mailing_address_2",              # UNNECESSARY
#"mailing_care_of",                # UNNECESSARY
#"mailing_city_state",             # UNNECESSARY
#"mailing_street",                 # UNNECESSARY
#"mailing_zip",                    # UNNECESSARY
"market_value",                   # KEEP ------------------------------------the certified market value of the property.
#"market_value_date",              # UNNECESSARY
#"number_of_bathrooms",            # UNNECESSARY
#"number_of_bedrooms",             # UNNECESSARY
#"number_of_rooms",                # UNNECESSARY
#"number_stories",                 # UNNECESSARY
#"off_street_open",                # UNNECESSARY
#"other_building",                 # UNNECESSARY
"owner_1",                        # KEEP?
"owner_2",                        # KEEP?
"parcel_number",                  # KEEP to JOIN***
#"parcel_shape",                   # UNNECESSARY
#"quality_grade",                  # UNNECESSARY
"recording_date",                 # KEEP? -----------------------------------date the deed was presented to records.
"registry_number",                # KEEP to JOIN
"sale_date",                      # KEEP
"sale_price",                     # KEEP
#"separate_utilities",             # UNNECESSARY
#"sewer",                          # UNNECESSARY
#"site_type",                      # UNNECESSARY
#"state_code",                     # UNNECESSARY
#"street_code",                    # UNNECESSARY
#"street_designation",             # UNNECESSARY
#"street_direction",               # UNNECESSARY
#"street_name",                    # UNNECESSARY
#"suffix",                         # UNNECESSARY
#"taxable_building",               # UNNECESSARY
#"taxable_land",                   # UNNECESSARY
#"topography",                     # UNNECESSARY
"total_area",                     # KEEP
#"total_livable_area",             # UNNECESSARY
#"type_heater",                    # UNNECESSARY
"unfinished",                     # KEEP?
#"unit",                           # UNNECESSARY
#"utility",                        # UNNECESSARY
#"view_type",                      # UNNECESSARY
"year_built",                     # KEEP?
#"year_built_estimate",            # UNNECESSARY
#"zip_code",                       # UNNECESSARY
"zoning",                         # KEEP
"pin",                            # KEEP to JOIN ****
"lat",                            # KEEP****
"lng")                            # KEEP****
# Data wrangling
propertiesData <- properties %>%
dplyr::select(propertiesVars) %>%
rename("address" = location) %>%
filter(!is.na(lat), !is.na(lng)) %>%              ### REMOVE before joining to parcels!!!
st_as_sf(coords = c("lat","lng"), crs = 4326)
# join propertiesData to parcelData
parcelsProps_A <- propertiesData %>%
st_drop_geometry() %>%
inner_join(parcelsData, by=c('pin'='PIN'))
# get properties that were not joined by pin
notJoined <- propertiesData %>%
filter(!pin %in% unique(parcelsProps$pin))
# join the ones that couldn't be joined by pin=PIN by their registry number?
parcelsProps_B <- notJoined %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='BASEREG'))
g(parcelsProps_A)
g(parcelsProps_B)
View(parcelsProps_B)
??inner_join
# join the ones that couldn't be joined by pin=PIN by their registry number?
parcelsProps_B <- notJoined %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='BASEREG'), keep=T)
# join propertiesData to parcelData
parcelsProps_A <- propertiesData %>%
st_drop_geometry() %>%
inner_join(parcelsData, by=c('pin'='PIN'), keep=T)
# get properties that were not joined by pin
notJoined <- propertiesData %>%
filter(!pin %in% unique(parcelsProps$pin))
# join the ones that couldn't be joined by pin=PIN by their registry number?
parcelsProps_B <- notJoined %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='BASEREG'), keep=T)
parcelsProps <- rbind(parcelsProps_A, parcelsProps_B)
View(parcelsProps_A)
View(notJoined)
# join the ones that couldn't be joined by pin=PIN by their registry number?
parcelsProps_B <- notJoined %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('pin'='PIN'), keep=T)
# join the ones that couldn't be joined by pin=PIN by their registry number?
parcelsProps_B <- notJoined %>%
st_drop_geometry() %>%
inner_join(., parcelsData, by=c('registry_number'='BASEREG'), keep=T)
vacantLandProps <- propertiesData %>%
st_drop_geometry() %>%
inner_join(vacantLandData, by=c('parcel_number'='OPA_ID'))
# propertiesData <---> vacantLandData
len(unique(vacantLandData$parcel_number))
table(unique(vacantLandData$OPA_ID) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(vacantLandData$OPA_ID))
49/(27579+49)           # 0.2%
27579/(27579+553725)    # 4.7%
vacantLandProps <- propertiesData %>%
st_drop_geometry() %>%
inner_join(vacantLandData, by=c('parcel_number'='OPA_ID'))
permitsProps <- permitsData %>%
inner_join(propertiesData,  by = c('parcel_number'='opa_account_num'))
permitsProps <- propertiesData %>%
st_drop_geometry() %>%
inner_join(permitsData,  by = c('parcel_number'='opa_account_num'))
permitsProps <- propertiesData %>%
st_drop_geometry() %>%
inner_join(permitsData,  by = c('parcel_number'='opa_account_num'))
# propertiesData <---> delinquenciesData
len(unique(delinquenciesData$opa_number))
table(unique(delinquenciesData$opa_number) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(delinquenciesData$opa_number))
2077/(70639+2077)       #  3%
70639/(70639+510665)    # 12%
initialDate = '2020-01-01'
finalDate = '2021-01-01'
delinquenciesProps <- propertiesData %>%
inner_join(delinquenciesData, by = c('parcel_number'='opa_number')) %>%
#filter(category_code == 6) %>%
#filter(sheriff_sale == 'Y') %>%
#mutate(debtPercentage = total_due/market_value) %>%
filter(sale_date => initialDate & sale_date < finalDate)%>%
delinquenciesProps <- propertiesData %>%
inner_join(delinquenciesData, by = c('parcel_number'='opa_number'))
delinquenciesProps <- propertiesData %>%
inner_join(delinquenciesData, by = c('parcel_number'='opa_number')) %>%
#filter(category_code == 6) %>%
#filter(sheriff_sale == 'Y') %>%
#mutate(debtPercentage = total_due/market_value) %>%
filter(sale_date => initialDate & sale_date < finalDate) %>%
delinquenciesProps <- propertiesData %>%
inner_join(delinquenciesData, by = c('parcel_number'='opa_number')) %>%
#filter(category_code == 6) %>%
#filter(sheriff_sale == 'Y') %>%
#mutate(debtPercentage = total_due/market_value) %>%
filter(sale_date >= initialDate & sale_date < finalDate) %>%
st_sf()
# permitsData <---> propertiesData
len(unique(permitsData$opa_account_num))
table(unique(permitsData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(permitsData$opa_account_num))
540/(31466+540)         # 1.7%
31466/(31466+549838)    # 5.4%
permitsProps <- propertiesData %>%
st_drop_geometry() %>%
inner_join(permitsData,  by = c('parcel_number'='opa_account_num'))
# propertiesData <---> delinquenciesData
len(unique(delinquenciesData$opa_number))
table(unique(delinquenciesData$opa_number) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(delinquenciesData$opa_number))
2077/(70639+2077)       #  3%
70639/(70639+510665)    # 12%
initialDate = '2020-01-01'
finalDate = '2021-01-01'
delinquenciesProps <- propertiesData %>%
inner_join(delinquenciesData, by = c('parcel_number'='opa_number')) %>%
#filter(category_code == 6) %>%
#filter(sheriff_sale == 'Y') %>%
#mutate(debtPercentage = total_due/market_value) %>%
filter(sale_date >= initialDate & sale_date < finalDate) %>%
st_sf()
# provisional map of delinquencies
m(delinquenciesProps)
# propertiesData <---> transfersData
len(unique(transfersData$opa_account_num))
table(unique(transfersData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(transfersData$opa_account_num))
2632/(258581+2632)      #  1%
258581/(258581+322723)  # 44%
transfersProps <- propertiesData %>%
inner_join(transfersData, by= c('parcel_number'='opa_account_num'))
transfersProps <- propertiesData %>%
st_drop_geometry() %>%
inner_join(transfersData, by= c('parcel_number'='opa_account_num'))
g(transfersData)
transfersProps <- propertiesData %>%
inner_join(transfersData, by= c('parcel_number'='opa_account_num'))
g(transfersProps)
g(transfersData)
unique(transfersData$document_type)
table(transfersData$document_type)
# Data wrangling
transfersData <- transfers %>%
filter(display_date > initialDate) %>%
dplyr::select(transfersVars) %>%
rename('address' = street_address) %>%
filter(!is.na(opa_account_num)) %>%
filter(document_type %in% c('DEED',
'DEED LAND BANK',
'DEED MISCELLANEOUS',
'DEED MISCELLANEOUS TAXABLE',
'DEED OF CONDEMNATION',
'DEED SHERIFF'))
table(transfersData$document_type)
table(transfers$document_type)
# Data wrangling
transfersData <- transfers %>%
filter(display_date > initialDate) %>%
dplyr::select(transfersVars) %>%
rename('address' = street_address) %>%
filter(!is.na(opa_account_num)) %>%
filter(document_type %in% c('DEED',
'DEED LAND BANK',
'DEED MISCELLANEOUS',
'DEED MISCELLANEOUS TAXABLE',
'DEED OF CONDEMNATION',
'DEED SHERIFF'))
# propertiesData <---> transfersData
len(unique(transfersData$opa_account_num))
table(unique(transfersData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(transfersData$opa_account_num))
2632/(258581+2632)      #  1%
258581/(258581+322723)  # 44%
transfersProps <- propertiesData %>%
inner_join(transfersData, by= c('parcel_number'='opa_account_num'))
g(transfersData)
# propertiesData <---> transfersData
len(unique(transfersData$opa_account_num))
table(unique(transfersData$opa_account_num) %in% unique(propertiesData$parcel_number))
table(unique(propertiesData$parcel_number) %in% unique(transfersData$opa_account_num))
2632/(258581+2632)      #  1%
258581/(258581+322723)  # 44%
transfersProps <- propertiesData %>%
inner_join(transfersData, by= c('parcel_number'='opa_account_num'))
g(transfersData)
58427/(58427+522877)  # 44%
424/(58427+425)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(sf)
library(kableExtra)
library(tigris)
library(mapview)
library(tidyverse)
library(tidycensus)
# set options
options(scipen = 999)
options(tigris_class = "sf")
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shorcuts
g <- glimpse
m <- mapview
len <- length
st_c <- st_coordinates
census_api_key("c2bdb8d298b60ec0cb50b561a2f8df61e92f6b39")
acsVariableList2019 <- load_variables(2019, "acs5", cache = TRUE)
vars <- c("B02001_001E", # Total population
"B11001_002E", # Total households
"B02001_002E", # Total white population
"B08015_001E", # Aggregate number of vehicles used in commuting
"B08103_001E", # Median age by mode of transportation
"B08103_004E", # Median age by mode of transportation: Public Transportation
"B08103_005E", # Median age by mode of transportation: Walking
"B19013_001E") # Median household income
# Get the data
tracts19 <-
get_acs(geography = "tract",
variables = vars,
year=2019,
state = 42,
county = 101,
geometry=T,
output="wide") %>%
st_transform(st_crs('EPSG:4269')) %>%
rename(totalPop = "B02001_001E",
totalHHs = "B11001_002E",
whitePop = "B02001_002E",
aggVehicles = "B08015_001E",
medAgeTotal = "B08103_001E",
medAgeTransit = "B08103_004E",
medAgeWalking = "B08103_005E",
medHHInc = "B19013_001E") %>%
dplyr::select(-NAME, -starts_with("B")) %>%
replace(is.na(.), 0) %>%
mutate(pctWhite = ifelse(totalPop > 0, whitePop / totalPop, 0),
commVehHH = ifelse(totalHHs > 0, aggVehicles / totalHHs, 0),
diffAgeTransit = ifelse(medAgeTransit == 0, 0, medAgeTotal - medAgeTransit),
diffAgeWalking = ifelse(medAgeWalking == 0, 0, medAgeTotal - medAgeWalking)) %>%
dplyr::select(-whitePop, -aggVehicles, -medAgeWalking, -medAgeTransit)
# R Markdown options
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F, cache=T)
# LOAD PACKAGES
library(sf)
library(riem)
library(caret)
library(spdep)
library(knitr)
library(gifski)
library(tigris)
library(mapview)
library(geojsonR)
library(tidyverse)
library(tidycensus)
library(lubridate)
library(gganimate)
library(gridExtra)
library(kableExtra)
# R options setup
options(scipen = 999)
options(tigris_class = "sf")
# additional functions from PPA book
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shortcuts
g <- glimpse
m <- mapview
len <- length
st_c <- st_coordinates
phlcrs <- 'EPSG:32129' #'EPSG:3364' #'EPSG:4269'
# # get geometry for blocks in Philadelphia
# phlblocks <- tigris::blocks(state = 42, county = 101) %>%
#   dplyr::select(GEOID10, geometry)
#
# # get geometry for block groups in Philadelphia
# phlgroups <- tigris::block_groups(state = 42, county = 101) %>%
#   dplyr::select(GEOID, geometry)
# get geometry for tracts in Philadelphia
phltracts <- tigris::tracts(state = 42, county = 101) %>%
dplyr::select(GEOID, geometry) %>%
st_transform(st_crs(phlcrs))
# get geometry for the county of Philadelphia
phlcounty <- tigris::counties(state = 42) %>%
filter(GEOID == '42101') %>%
dplyr::select(GEOID, geometry) %>%
st_transform(st_crs(phlcrs))
