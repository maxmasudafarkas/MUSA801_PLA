for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
model <- randomForest(permitDummy ~
#year +
#indOwnerDelta + #salesCount +
meanSqftPrice +
perc_medRentChange2yr + medRent +
#meanDebt +
totalVacantLots +
perc_popChange2yr + #pop +
perc_whiteChange2yr + #perc_white +
medInc + perc_medIncChange2yr +
licenses, # + parksNN + schoolsNN + transitNN + crime,
data = fold.train)
thisPrediction <-
mutate(fold.test, Prediction = predict(model, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(allPredictions)
}
spatialCV_score <- crossValidate(
dataset = featuresNet_neigh,
id = "NAME",
dependentVariable = "permitDummy",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy, Prediction, geometry)
finalIndVars <- c("meanSqftPrice", "perc_medRentChange2yr", "medRent", "totalVacantLots",
"perc_popChange2yr", "perc_whiteChange2yr", "medInc", "perc_medIncChange2yr", "licenses")
spatialCV_score <- crossValidate(
dataset = featuresNet_neigh,
id = "NAME",
dependentVariable = "permitDummy",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy, Prediction, geometry)
spatialCV_score <- crossValidate_score(
dataset = featuresNet_neigh,
id = "NAME",
dependentVariable = "permitDummy",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy, Prediction, geometry)
View(spatialCV_score)
phlcrs <- 'EPSG:32129'
phil_neigh <- read_sf("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/MUSA801_PLA/data/Neighborhoods_Philadelphia/Neighborhoods_Philadelphia.shp") %>%
st_transform(st_crs(phlcrs))
featuresNet_neigh <-
st_centroid(featuresNet19 %>% st_sf()) %>%
st_join(dplyr::select(phil_neigh, NAME)) %>%
na.omit()
crossValidate <- function(dataset, id, dependentVariable, indVariables) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
model <- randomForest(permitDummy_numeric ~
#year +
#indOwnerDelta + #salesCount +
meanSqftPrice +
perc_medRentChange2yr + medRent +
#meanDebt +
totalVacantLots +
perc_popChange2yr + #pop +
perc_whiteChange2yr + #perc_white +
medInc + perc_medIncChange2yr +
licenses, # + parksNN + schoolsNN + transitNN + crime,
data = fold.train)
thisPrediction <-
mutate(fold.test, Prediction = ifelse(predict(model, fold.test, type = "response")>0.3944, 1, 0))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(allPredictions)
}
get_accuracy <- function(cm){
acc <- cm$overall[['Accuracy']]
return(acc)
}
finalIndVars <- c("meanSqftPrice", "perc_medRentChange2yr", "medRent", "totalVacantLots",
"perc_popChange2yr", "perc_whiteChange2yr", "medInc", "perc_medIncChange2yr", "licenses")
spatialCV <- crossValidate(
dataset = featuresNet_neigh[0:100],
id = "NAME",
dependentVariable = "permitDummy_numeric",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy_numeric, Prediction, geometry)
spatialCV <- crossValidate(
dataset = featuresNet_neigh[0:100,],
id = "NAME",
dependentVariable = "permitDummy_numeric",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy_numeric, Prediction, geometry)
View(spatialCV)
crossValidate_score <- function(dataset, id, dependentVariable, indVariables) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
model <- randomForest(permitDummy_numeric ~
#year +
#indOwnerDelta + #salesCount +
meanSqftPrice +
perc_medRentChange2yr + medRent +
#meanDebt +
totalVacantLots +
perc_popChange2yr + #pop +
perc_whiteChange2yr + #perc_white +
medInc + perc_medIncChange2yr +
licenses, # + parksNN + schoolsNN + transitNN + crime,
data = fold.train)
thisPrediction <-
mutate(fold.test, Prediction = predict(model, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(allPredictions)
}
spatialCV_score <- crossValidate_score(
dataset = featuresNet_neigh[0:100,],
id = "NAME",
dependentVariable = "permitDummy_numeric",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy_numeric, Prediction, geometry)
View(spatialCV_score)
finalIndVars
class(featuresNet_neigh$permitDummy_numeric)
class(featuresNet_neigh$permitDummy)
?randomForest
View(rfM0_out)
crossValidate_score <- function(dataset, id, dependentVariable, indVariables) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
model <- randomForest(permitDummy_numeric ~
year +
salesCount + indOwnerDelta +
meanSqftPrice +
medRent + perc_medRentChange2yr +
meanDebt +
totalVacantLots +
pop + perc_popChange2yr +
perc_white + perc_whiteChange2yr +
medInc + + perc_medIncChange2yr +
licenses + parksNN + schoolsNN + transitNN + crime,
data = fold.train)
thisPrediction <-
mutate(fold.test, Prediction = predict(model, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(allPredictions)
}
spatialCV_score <- crossValidate_score(
dataset = featuresNet_neigh[0:100,],
id = "NAME",
dependentVariable = "permitDummy_numeric",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy_numeric, Prediction, geometry)
finalIndVars <- as.character(c(year, salesCount, indOwnerDelta,
meanSqftPrice,
medRent, perc_medRentChange2yr,
meanDebt,
totalVacantLots,
pop, perc_popChange2yr,
perc_white, perc_whiteChange2yr,
medInc, perc_medIncChange2yr,
licenses, parksNN, schoolsNN, transitNN, crime))
finalIndVars <- c("year", "salesCount", "indOwnerDelta",
"meanSqftPrice",
"medRent", "perc_medRentChange2yr",
"meanDebt",
"totalVacantLots",
"pop", "perc_popChange2yr",
"perc_white", "perc_whiteChange2yr",
"medInc", 'perc_medIncChange2yr',
"licenses", "parksNN", "schoolsNN", "transitNN", "crime")
crossValidate_score <- function(dataset, id, dependentVariable, indVariables) {
allPredictions <- data.frame()
cvID_list <- unique(dataset[[id]])
for (i in cvID_list) {
thisFold <- i
cat("This hold out fold is", thisFold, "\n")
fold.train <- filter(dataset, dataset[[id]] != thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
fold.test  <- filter(dataset, dataset[[id]] == thisFold) %>% as.data.frame() %>%
dplyr::select(id, geometry, indVariables, dependentVariable)
model <- randomForest(permitDummy_numeric ~
year +
salesCount + indOwnerDelta +
meanSqftPrice +
medRent + perc_medRentChange2yr +
meanDebt +
totalVacantLots +
pop + perc_popChange2yr +
perc_white + perc_whiteChange2yr +
medInc + + perc_medIncChange2yr +
licenses + parksNN + schoolsNN + transitNN + crime,
data = fold.train)
thisPrediction <-
mutate(fold.test, Prediction = predict(model, fold.test, type = "response"))
allPredictions <-
rbind(allPredictions, thisPrediction)
}
return(allPredictions)
}
spatialCV_score <- crossValidate_score(
dataset = featuresNet_neigh[0:100,],
id = "NAME",
dependentVariable = "permitDummy_numeric",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy_numeric, Prediction, geometry)
cv_result_avg <-
spatialCV_score[0:500] %>%
dplyr::group_by(cvID) %>%
dplyr::summarize(mean_score = mean(Prediction)) %>%
ungroup()
spatialCV_score <- crossValidate_score(
dataset = featuresNet_neigh[0:500,],
id = "NAME",
dependentVariable = "permitDummy_numeric",
indVariables = finalIndVars) %>%
dplyr::select(cvID = NAME, permitDummy_numeric, Prediction, geometry)
cv_result_avg <-
spatialCV_score %>%
dplyr::group_by(cvID) %>%
dplyr::summarize(mean_score = mean(Prediction)) %>%
ungroup()
View(cv_result_avg)
featuresNet_noGeo$permitDummy_numeric
# set color palette
color1 <- "#18B6C4"
color2 <- "#18B6C4"
featuresNet_sf <- featuresNet %>%
st_sf()
featuresNet_noGeo <- featuresNet %>%
select(-geometry, -permitDummy, -permitDummy_numeric)
for (var in colnames(featuresNet_noGeo)) {
plot1 <-
featuresNet %>%
ggplot() +
geom_boxplot(aes_string(x=var, y="permitDummy", fill = "permitDummy"), color="#808080") +
coord_flip() +
scale_fill_manual(values = c(color1, color2)) +
scale_y_discrete(labels=c("no permits", "had permits")) +
labs(title= "Feature:",
subtitle = var,
x = "",
y = "") +
theme(
#axis.text.x = element_blank(),
legend.position = "none",
plot.background = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "#ffffff"),
strip.text.y = element_text(size = 12, color = colors[1], hjust=0.05)
)
plot2 <-
featuresNet_sf %>%
ggplot() +
geom_sf(data=featuresNet_sf, aes_string(fill=var), color=NA, inherit.aes = FALSE) +
scale_fill_viridis(option = "mako",
name = "value",
begin = 0.3,
#trans = "log1p",
direction = 1) +
mapTheme() +
theme(axis.text.x = element_blank(),
legend.position = c(0.85, 0.2),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
legend.title=element_text(size=12),
legend.text=element_text(size=9))
plot <- grid.arrange(plot1,
plot2,
ncol = 2,
widths = c(2, 3))
ggsave(paste("visualizations/2nd_presentation/boxMap/", var, ".png", sep=""), #Gillian's path
plot, dpi = 300,
width = 8, height = 5, units = "in")
}
for (var in colnames(featuresNet_noGeo)) {
plot1 <-
featuresNet %>%
ggplot() +
geom_boxplot(aes_string(x=var, y="permitDummy", fill = "permitDummy"), color="#808080") +
coord_flip() +
scale_fill_manual(values = c(color1, color2)) +
scale_y_discrete(labels=c("no permits", "had permits")) +
labs(title= "Feature:",
subtitle = var,
x = "",
y = "") +
theme(
#axis.text.x = element_blank(),
legend.position = "none",
plot.background = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "#ffffff"),
strip.text.y = element_text(size = 12, color = colors[1], hjust=0.05)
)
plot2 <-
featuresNet_sf %>%
ggplot() +
geom_sf(data=featuresNet_sf, aes_string(fill=var), color=NA, inherit.aes = FALSE) +
scale_fill_viridis(option = "mako",
name = "value",
begin = 0.3,
#trans = "log1p",
direction = 1) +
mapTheme() +
theme(axis.text.x = element_blank(),
legend.position = c(0.85, 0.2),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
legend.title=element_text(size=12),
legend.text=element_text(size=9))
plot <- grid.arrange(plot1,
plot2,
ncol = 2,
widths = c(2, 3))
ggsave(paste("visualizations/2nd_presentation/boxMap/", var, ".png", sep=""), #Gillian's path
plot, dpi = 300,
width = 8, height = 5, units = "in")
}
plot <- grid.arrange(plot1,
plot2,
ncol = 2,
widths = c(2, 3))
for (var in colnames(featuresNet_noGeo)) {
plot1 <-
featuresNet %>%
ggplot() +
geom_boxplot(aes_string(x=var, y="permitDummy", fill = "permitDummy"), color="#808080") +
coord_flip() +
scale_fill_manual(values = c(color1, color2)) +
scale_y_discrete(labels=c("no permits", "had permits")) +
labs(title= "Feature:",
subtitle = var,
x = "",
y = "") +
theme(
#axis.text.x = element_blank(),
legend.position = "none",
plot.background = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "#ffffff"),
strip.text.y = element_text(size = 12, color = colors[1], hjust=0.05)
)
plot2 <-
featuresNet_sf %>%
ggplot() +
geom_sf(data=featuresNet_sf, aes_string(fill=var), color=NA, inherit.aes = FALSE) +
scale_fill_viridis(option = "mako",
name = "value",
begin = 0.3,
#trans = "log1p",
direction = 1) +
mapTheme() +
theme(axis.text.x = element_blank(),
legend.position = c(0.85, 0.2),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
legend.title=element_text(size=12),
legend.text=element_text(size=9))
plot <- grid.arrange(plot1,
plot2,
ncol = 2,
widths = c(2, 3))
# ggsave(paste("visualizations/2nd_presentation/boxMap/", var, ".png", sep=""), #Gillian's path
#        plot, dpi = 300,
#        width = 8, height = 5, units = "in")
}
getwd()
setwd("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/MUSA801_PLA")
getwd()
colors
# set color palette
color1 <- "#18B6C4"
color2 <- "#18B6C4"
featuresNet_sf <- featuresNet %>%
st_sf()
featuresNet_noGeo <- featuresNet %>%
select(-geometry, -permitDummy, -permitDummy_numeric)
for (var in colnames(featuresNet_noGeo)) {
plot1 <-
featuresNet %>%
ggplot() +
geom_boxplot(aes_string(x=var, y="permitDummy", fill = "permitDummy"), color="#808080") +
coord_flip() +
scale_fill_manual(values = c(color1, color2)) +
scale_y_discrete(labels=c("no permits", "had permits")) +
labs(title= "Feature:",
subtitle = var,
x = "",
y = "") +
theme(
#axis.text.x = element_blank(),
legend.position = "none",
plot.background = element_blank(),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
strip.background = element_rect(fill = "#ffffff"),
strip.text.y = element_text(size = 12, color = colors[1], hjust=0.05)
)
plot2 <-
featuresNet_sf %>%
ggplot() +
geom_sf(data=featuresNet_sf, aes_string(fill=var), color=NA, inherit.aes = FALSE) +
scale_fill_viridis(option = "mako",
name = "value",
begin = 0.3,
#trans = "log1p",
direction = 1) +
mapTheme() +
theme(axis.text.x = element_blank(),
legend.position = c(0.85, 0.2),
panel.border = element_blank(),
panel.background = element_rect(fill = "#ffffff"),
panel.grid.major.x = element_blank(),
legend.title=element_text(size=12),
legend.text=element_text(size=9))
plot <- grid.arrange(plot1,
plot2,
ncol = 2,
widths = c(2, 3))
ggsave(paste("visualizations/2nd_presentation/boxMap/", var, ".png", sep=""), #Gillian's path
plot, dpi = 300,
width = 8, height = 5, units = "in")
}
# R Markdown options
knitr::opts_chunk$set(echo = T, warning = F, error = F, message = F, results = F, cache=T)
# LOAD PACKAGES
library(sf)
library(riem)
library(caret)
library(spdep)
library(knitr)
library(gifski)
library(tigris)
library(mapview)
library(geojsonR)
library(tidyverse)
library(lubridate)
library(gganimate)
library(gridExtra)
library(kableExtra)
library(ggplot2)
library(basemaps)
library(ggmap)
library(viridis)
library(tidycensus)
# R options setup
options(scipen = 999)
options(tigris_class = "sf")
# additional functions from PPA book
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
# function shortcuts
g <- glimpse
m <- mapview
len <- length
st_c <- st_coordinates
# Gillian's working directory
setwd("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/MUSA801_PLA")
# color scheme
# https://coolors.co/b98b73-cb997e-ddbea9-ffe8d6-d4c7b0-b7b7a4-a5a58d-6b705c-3f4238
gillianpick <- c("#3f4238", "#b98b73", "#f6bd60", "#ff758f", "#2a9d8f")
#               dark green, dark brown, highlight yellow, highlight pink, highlight blue
delinquenciesProps_allYrs <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/delinquenciesProps_allYrs.rds")
transfersProps_allYrs <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/transfersProps_allYrs.rds")
zoningPermitsProps_allYrs <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/zoningPermitsProps_allYrs.rds")
View(delinquenciesProps_allYrs)
vacantLandProps <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/vacantLandProps.rds")
View(vacantLandProps)
View(spatialCV_score)
spatialCV <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/cvByNeighborhood_accuracy_numeric.rds")
getwd()
spatialCV <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/cvByNeighborhood_accuracy_numeric.rds")
getwd()
spatialCV <- readRDS("C:/Users/m1861/Desktop/CPLN790_MUSAPracticum/Data_Box/local/cvByNeighborhood_accuracy.rds")
View(spatialCV)
View(phil_neigh)
